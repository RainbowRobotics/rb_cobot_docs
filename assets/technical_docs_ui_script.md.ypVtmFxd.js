import{_ as a,c as e,o as t,U as n,Cs as s,Ct as i}from"./chunks/framework._bMY95IQ.js";const g=JSON.parse('{"title":"RB UI Script v6.10","description":"","frontmatter":{"layout":"doc","outline":"deep"},"headers":[],"relativePath":"technical_docs/ui_script.md","filePath":"technical_docs/ui_script.md"}'),p={name:"technical_docs/ui_script.md"},l=n(`<h1 id="rb-ui-script-v6-10" tabindex="-1">RB UI Script v6.10 <a class="header-anchor" href="#rb-ui-script-v6-10" aria-label="Permalink to &quot;RB UI Script v6.10&quot;">​</a></h1><h3 id="_1-variable-types-and-declaration" tabindex="-1">1. VARIABLE TYPES AND DECLARATION <a class="header-anchor" href="#_1-variable-types-and-declaration" aria-label="Permalink to &quot;1. VARIABLE TYPES AND DECLARATION&quot;">​</a></h3><p>The UI Script of Rainbow Robotics supports the following data types.</p><ul><li><strong>var</strong> : Stores a single number.</li><li><strong>arr</strong> : Stores the multiple number array. (up to 20 lengths)</li><li><strong>str</strong> : Stores string element.</li><li><strong>point, pnt</strong> : Stores posture (x, y, z, Rx, Ry, Rz) information.</li><li><strong>joint, jnt</strong> : Stores joint angles (J0, J1, J2, J3, J4, J5).</li><li><strong>vec</strong> : A vector that manages numbers.<br> (Please refer to <strong>Chapter 10</strong> separately for number / string vectors.)</li></ul><p>An example of a variable declaration is shown below.</p><h4 id="_1-1-var" tabindex="-1">1.1 var <a class="header-anchor" href="#_1-1-var" aria-label="Permalink to &quot;1.1 var&quot;">​</a></h4><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_val          # Assign variable without initial value (initial value is 0)</span></span>
<span class="line"><span>var my_val = 1      # Assign variable with initial value</span></span></code></pre></div><h4 id="_1-2-arr" tabindex="-1">1.2 arr <a class="header-anchor" href="#_1-2-arr" aria-label="Permalink to &quot;1.2 arr&quot;">​</a></h4><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>arr my_arr              # Assign array without initial value (initial value is {0, 0, … , 0})</span></span>
<span class="line"><span>arr my_arr = {1, 2, 3}  # Assign array with initial value</span></span></code></pre></div><h4 id="_1-3-str" tabindex="-1">1.3 str <a class="header-anchor" href="#_1-3-str" aria-label="Permalink to &quot;1.3 str&quot;">​</a></h4><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str my_str              # Assign string without initial value (initial value is “”)</span></span>
<span class="line"><span>str my_str = “Hello”    # Assign string with initial value</span></span></code></pre></div><h4 id="_1-4-point-pnt" tabindex="-1">1.4 point, pnt <a class="header-anchor" href="#_1-4-point-pnt" aria-label="Permalink to &quot;1.4 point, pnt&quot;">​</a></h4><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point          # Assign point without initial value (initial value is {0, 0, 0, 0, 0, 0})</span></span>
<span class="line"><span>point my_point = {100, 200, 300, 90, 0, 90}   # Assign point with initial value</span></span>
<span class="line"><span>pnt my_point = {50, 100, 100, 90, 0, 0}       # Assign point with initial value</span></span></code></pre></div><h4 id="_1-5-joint-jnt" tabindex="-1">1.5 joint, jnt <a class="header-anchor" href="#_1-5-joint-jnt" aria-label="Permalink to &quot;1.5 joint, jnt&quot;">​</a></h4><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>joint my_joint          # Assign joint without initial value (initial value is {0, 0, 0, 0, 0, 0})</span></span>
<span class="line"><span>joint my_joint = {0, 0, 0, 90, 0, 0}    # Assign joint with initial value</span></span>
<span class="line"><span>jnt my_joint = {30,0,0,90,0,0}          # Assign joint with initial value</span></span></code></pre></div><h4 id="_1-6-abbreviations" tabindex="-1">1.6 Abbreviations <a class="header-anchor" href="#_1-6-abbreviations" aria-label="Permalink to &quot;1.6 Abbreviations&quot;">​</a></h4><p>Abbreviations used in this document are as follows.</p><div class="center-align th-align"><table><tr><th>Abbreviation</th><th></th></tr><tr><th>v</th><td>variable type (var)</td></tr><tr><th>a</th><td>Array type (arr)</td></tr><tr><th>s</th><td>String type (str)</td></tr><tr><th>P</th><td>Point type (pnt)</td></tr><tr><th>J</th><td>Joint type (jnt)</td></tr></table></div><h4 id="_1-7-point-type-and-joint-type" tabindex="-1">1.7 Point type and Joint type <a class="header-anchor" href="#_1-7-point-type-and-joint-type" aria-label="Permalink to &quot;1.7 Point type and Joint type&quot;">​</a></h4><p>Point type and Joint type variables can be used as temporary variables without names.</p><ul><li>Temporary Point type : pnt[x, y, z, Rx, Ry, Rz]</li><li>Temporary Joint type : jnt[J0, J1, J2, J3, J4, J5]</li></ul><p>These temporary variables can be used immediately without a separate name declaration, and can be utilized as follows.</p><ul><li><strong>Method 1</strong> : This is an example of declaring a separate variable and using it in a function.</li><li><strong>Method 2</strong> : This is an example of using the temporary variable as a function call argument without declaring a variable separately.</li></ul><p>Method 1 :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>jnt my_angle = {0,0,90,0,90,0}  # Assign joint type with name ‘my_angle’.</span></span>
<span class="line"><span>move_j(my_angle, 60, 80)        # Use ‘my_angle’ as an input argument of function ‘move_j’.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pnt my_point = {100, 200, 300, 90, 0, 0}  # Assign point type with name ‘my_point’.</span></span>
<span class="line"><span>move_l(my_point, 20, 5)                   # Use ‘my_point’ as an input argument of function ‘move_l’</span></span></code></pre></div><p>Method 2 :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>move_j(jnt[0,0,90,0,90,0], 60, 80)       # temporary joint type is used as an input argument of function ‘move_j’.</span></span>
<span class="line"><span>move_l(pnt[100,200,300,90,0,0], 60, 80)  # temporary point type is used as an input argument of function ‘move_l’.</span></span></code></pre></div><p>The above examples are examples using move_j(J, v, v) and move_l(P, v, v) functions.<br> For more information about these functions, see Chapter 7. Motion Functions.</p><h4 id="_1-8-ui-script-examples" tabindex="-1">1.8 UI Script examples <a class="header-anchor" href="#_1-8-ui-script-examples" aria-label="Permalink to &quot;1.8 UI Script examples&quot;">​</a></h4><p>Rainbow UI Script can be used as follows</p><p>Example 1. Simple math operation</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var a = 1                # Assign variable, name is ‘a’ and init-value 1</span></span>
<span class="line"><span>var b = 2                # Assign variable, name is ‘b’ and init-value 2</span></span>
<span class="line"><span>var c                    # Assign variable, name is ‘c’</span></span>
<span class="line"><span>c = a *b + 5 + sqrt(4)   # ‘c’ stores the result value of 9</span></span></code></pre></div><p>Example 2. Basic movement</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>joint target_angle = {0, 0, 90, 0, 90, 0}   # Assign joint type, name is ‘target_angle’</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_j(target_angle, 60, 80)                # move arm with ‘move_j’, speed/acceleration = 60/80</span></span>
<span class="line"><span>target_angle[0] = target_angle[0] + 45      # Add 45 degrees to the axis-0 value from the previous value.</span></span>
<span class="line"><span>move_j(target_angle, 60, 80)                # move arm with ‘move_j’, speed/acceleration = 60/80</span></span>
<span class="line"><span>target_angle[0] = target_angle[0] + 45      # Add 45 degrees to the axis-0 value from the previous value.</span></span>
<span class="line"><span>move_j(target_angle, 60, 80)                # move arm with ‘move_j’, speed/acceleration = 60/80</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_j(jnt[0, 0, 0, 0, 0, 0], 60, 80)       # move arm with ‘move_j’ to zero-home posture</span></span></code></pre></div><p>Example 3. String function</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str my_text = “123.78”                  # Assign string with name ‘my_text’</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var result_1 = to_num_int(my_text)      # 123 is stored in variable ‘result_1’</span></span>
<span class="line"><span>var result_2 = to_num(my_text)          # 123.78 is stored in variable ‘result_2’</span></span>
<span class="line"><span>var result_3 = round( to_num(my_text) ) # 124 is stored in variable ‘result_3’</span></span>
<span class="line"><span></span></span>
<span class="line"><span>str my_text2 = “abc”                    # Assign string with name ‘my_text2’</span></span>
<span class="line"><span>str my_text3 = my_text + my_text2       # “123.78abc” is stored in string ‘my_text3’</span></span></code></pre></div><h4 id="_1-9-operators" tabindex="-1">1.9 Operators <a class="header-anchor" href="#_1-9-operators" aria-label="Permalink to &quot;1.9 Operators&quot;">​</a></h4><p>The following comparison operators and logical operators can be used.</p><h5 id="_1-9-1-comparison-operators" tabindex="-1">1.9.1 Comparison operators <a class="header-anchor" href="#_1-9-1-comparison-operators" aria-label="Permalink to &quot;1.9.1 Comparison operators&quot;">​</a></h5><ol><li>A &gt;= B <ul><li>1 (True) if the left side is greater than or equal to the right side, otherwise 0 (False)</li></ul></li><li>A &lt;= B <ul><li>1 (True) if the right side is greater than or equal to the left side, otherwise 0 (False)</li></ul></li><li>A == B <ul><li>1 (True) if the left and right sides are equal, otherwise 0 (False)</li></ul></li><li>A != B -1 (True) if the left and right sides are not-equal, otherwise 0 (False)</li></ol><h5 id="_1-9-2-logical-operators" tabindex="-1">1.9.2 Logical operators <a class="header-anchor" href="#_1-9-2-logical-operators" aria-label="Permalink to &quot;1.9.2 Logical operators&quot;">​</a></h5><p>A &amp;&amp; B<br> A and B<br> A AND B<br> A And B</p><ul><li>1 (True) only if both the left and right sides are True, otherwise 0 (False)</li></ul><p>A || B<br> A or B<br> A OR B<br> A Or B</p><ul><li>1 (True) if either of the left and right sides is True, 0 (False) if both values are False</li></ul><h5 id="_1-9-3" tabindex="-1">1.9.3 <a class="header-anchor" href="#_1-9-3" aria-label="Permalink to &quot;1.9.3&quot;">​</a></h5><p>TRUE and FALSE used in comparison/logical operation are matched with the following values.</p><p>True = TRUE = true = 1<br> False = FALSE = false = 0</p><p>Therefore, the following two examples become the <strong>same expression</strong>.</p><p>Example 1.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>if (SD_SOCK_IS_OPEN_0 == True){</span></span>
<span class="line"><span>    // something to do</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Example 2.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>if (SD_SOCK_IS_OPEN_0 == 1){</span></span>
<span class="line"><span>    // something to do</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="_1-10-units" tabindex="-1">1.10 Units <a class="header-anchor" href="#_1-10-units" aria-label="Permalink to &quot;1.10 Units&quot;">​</a></h4><p>The Script grammar of Rainbow Robotics uses the following units.</p><ul><li>Angle : Degree</li><li>Position : mm (0.001m)</li></ul><p>The following rotation notation is used in the script grammar and notation of Rainbow Robotics.</p><ul><li>Z-Y’-X’’ Euler angle (Degree)</li></ul><p><img src="`+s+`" alt="missing"></p><h3 id="_2-math-functions" tabindex="-1">2. MATH FUNCTIONS <a class="header-anchor" href="#_2-math-functions" aria-label="Permalink to &quot;2. MATH FUNCTIONS&quot;">​</a></h3><br><h4 id="_2-1-v-cos-v" tabindex="-1">2.1 v = cos(v) <a class="header-anchor" href="#_2-1-v-cos-v" aria-label="Permalink to &quot;2.1 v = cos(v)&quot;">​</a></h4><p>Trigonometric function Cosine operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number (Unit: radian)<br></p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = cos(45*D2R)     # my_result = 0.7071</span></span></code></pre></div><h4 id="_2-2-v-cosd-v" tabindex="-1">2.2 v = cosd(v) <a class="header-anchor" href="#_2-2-v-cosd-v" aria-label="Permalink to &quot;2.2 v = cosd(v)&quot;">​</a></h4><p>Trigonometric function Cosine operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number <strong>(Unit: degree)</strong></p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = cosd(45)    # my_result= 0.7071</span></span></code></pre></div><h4 id="_2-3-v-sin-v" tabindex="-1">2.3 v = sin(v) <a class="header-anchor" href="#_2-3-v-sin-v" aria-label="Permalink to &quot;2.3 v = sin(v)&quot;">​</a></h4><p>Trigonometric function Sine operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number <strong>(Unit: radian)</strong></p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = sin(30*D2R)   # my_result= 0.5</span></span></code></pre></div><h4 id="_2-4-v-sind-v" tabindex="-1">2.4 v = sind(v) <a class="header-anchor" href="#_2-4-v-sind-v" aria-label="Permalink to &quot;2.4 v = sind(v)&quot;">​</a></h4><p>Trigonometric function Sine operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number <strong>(Unit: degree)</strong></p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = sind(30)    # my_result= 0.5</span></span></code></pre></div><h4 id="_2-5-v-tan-v" tabindex="-1">2.5 v = tan(v) <a class="header-anchor" href="#_2-5-v-tan-v" aria-label="Permalink to &quot;2.5 v = tan(v)&quot;">​</a></h4><p>Trigonometric function Tangent operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number <strong>(Unit: radian)</strong></p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = tan(45*D2R)   # my_result=1</span></span></code></pre></div><h4 id="_2-6-v-tand-v" tabindex="-1">2.6 v = tand(v) <a class="header-anchor" href="#_2-6-v-tand-v" aria-label="Permalink to &quot;2.6 v = tand(v)&quot;">​</a></h4><p>Trigonometric function Tangent operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number <strong>(Unit: degree)</strong></p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = tand(45)    # my_result=1</span></span></code></pre></div><h4 id="_2-7-v-acos-v" tabindex="-1">2.7 v = acos(v) <a class="header-anchor" href="#_2-7-v-acos-v" aria-label="Permalink to &quot;2.7 v = acos(v)&quot;">​</a></h4><p>Trigonometric function Inverse-Cosine operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number <strong>(Unit: radian)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = acos(-1)    # my_result= PI (3.141592)</span></span></code></pre></div><h4 id="_2-8-v-acosd-v" tabindex="-1">2.8 v = acosd(v) <a class="header-anchor" href="#_2-8-v-acosd-v" aria-label="Permalink to &quot;2.8 v = acosd(v)&quot;">​</a></h4><p>Trigonometric function Inverse-Cosine operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number <strong>(Unit: degree)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = acosd(-1)    # my_result=180</span></span></code></pre></div><h4 id="_2-9-v-asin-v" tabindex="-1">2.9 v = asin(v) <a class="header-anchor" href="#_2-9-v-asin-v" aria-label="Permalink to &quot;2.9 v = asin(v)&quot;">​</a></h4><p>Trigonometric function Inverse-Sine operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number <strong>(Unit: radian)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = asin(1)    # my_result= 1.5708</span></span></code></pre></div><h4 id="_2-10-v-asind-v" tabindex="-1">2.10 v = asind(v) <a class="header-anchor" href="#_2-10-v-asind-v" aria-label="Permalink to &quot;2.10 v = asind(v)&quot;">​</a></h4><p>Trigonometric function Inverse-Sine operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number <strong>(Unit: degree)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = asind(1)    # my_result= 90</span></span></code></pre></div><h4 id="_2-11-v-atan-v" tabindex="-1">2.11 v = atan(v) <a class="header-anchor" href="#_2-11-v-atan-v" aria-label="Permalink to &quot;2.11 v = atan(v)&quot;">​</a></h4><p>Trigonometric function Inverse-Tangent operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number <strong>(Unit: radian)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = atan(1)    # my_result= 0.7854</span></span></code></pre></div><h4 id="_2-12-v-atand-v" tabindex="-1">2.12 v = atand(v) <a class="header-anchor" href="#_2-12-v-atand-v" aria-label="Permalink to &quot;2.12 v = atand(v)&quot;">​</a></h4><p>Trigonometric function Inverse-Tangent operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number <strong>(Unit: degree)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = atand(1)    # my_result= 45</span></span></code></pre></div><h4 id="_2-13-v-atan2-v-v" tabindex="-1">2.13 v = atan2(v, v) <a class="header-anchor" href="#_2-13-v-atan2-v-v" aria-label="Permalink to &quot;2.13 v = atan2(v, v)&quot;">​</a></h4><p>Inverse trigonometric function that calculates the quadrant arc tangent.</p><ul><li><p>Input :<br> Two variable types or constant numbers<br> v: y direction variable type or number<br> v: x direction variable type or number</p></li><li><p>Return :<br> v : return single number <strong>(Unit: radian)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = atan2(1, 1)    # my_result= 0.7854</span></span></code></pre></div><h4 id="_2-14-v-atan2d-v-v" tabindex="-1">2.14 v = atan2d(v, v) <a class="header-anchor" href="#_2-14-v-atan2d-v-v" aria-label="Permalink to &quot;2.14 v = atan2d(v, v)&quot;">​</a></h4><p>Inverse trigonometric function that calculates the quadrant arc tangent.</p><ul><li><p>Input :<br> Two variable types or constant numbers<br> v: y direction variable type or number<br> v: x direction variable type or number</p></li><li><p>Return :<br> v : return single number <strong>(Unit: degree)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = atan2d(1, 1)    # my_result= 45</span></span></code></pre></div><h4 id="_2-15-pi" tabindex="-1">2.15 PI <a class="header-anchor" href="#_2-15-pi" aria-label="Permalink to &quot;2.15 PI&quot;">​</a></h4><p>It is a constant representing the circumference (π).</p><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_val = PI    # my_val = 3.142</span></span></code></pre></div><h4 id="_2-16-r2d" tabindex="-1">2.16 R2D <a class="header-anchor" href="#_2-16-r2d" aria-label="Permalink to &quot;2.16 R2D&quot;">​</a></h4><p>Operation constant (180/PI) to convert from radian to degree.</p><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_val= PI*R2D    # my_val=180</span></span></code></pre></div><h4 id="_2-17-d2r" tabindex="-1">2.17 D2R <a class="header-anchor" href="#_2-17-d2r" aria-label="Permalink to &quot;2.17 D2R&quot;">​</a></h4><p>Operation constant (PI/180) for converting degree to radian.</p><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_val= 180*D2R    # my_val=3.142</span></span></code></pre></div><h4 id="_2-18-v-abs-v" tabindex="-1">2.18 v = abs(v) <a class="header-anchor" href="#_2-18-v-abs-v" aria-label="Permalink to &quot;2.18 v = abs(v)&quot;">​</a></h4><p>Calculate absolute value of input argument</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = abs(-5.2)    # my_result= 5.2</span></span></code></pre></div><h4 id="_2-19-v-sqrt-v" tabindex="-1">2.19 v = sqrt(v) <a class="header-anchor" href="#_2-19-v-sqrt-v" aria-label="Permalink to &quot;2.19 v = sqrt(v)&quot;">​</a></h4><p>Square root operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = sqrt(4)    # my_result= 2</span></span></code></pre></div><h4 id="_2-20-v-cell-v" tabindex="-1">2.20 v = cell(v) <a class="header-anchor" href="#_2-20-v-cell-v" aria-label="Permalink to &quot;2.20 v = cell(v)&quot;">​</a></h4><p>Rounding-up operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = cell(4.2)    # my_result= 5</span></span></code></pre></div><h4 id="_2-21-v-floor-v" tabindex="-1">2.21 v = floor(v) <a class="header-anchor" href="#_2-21-v-floor-v" aria-label="Permalink to &quot;2.21 v = floor(v)&quot;">​</a></h4><p>Rounding-down operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = floor(4.8)    # my_result= 4</span></span></code></pre></div><h4 id="_2-22-v-round-v" tabindex="-1">2.22 v = round(v) <a class="header-anchor" href="#_2-22-v-round-v" aria-label="Permalink to &quot;2.22 v = round(v)&quot;">​</a></h4><p>Rounding operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = round(4.2)    # my_result= 4</span></span>
<span class="line"><span>var my_result = round (4.8)   # my_result= 5</span></span></code></pre></div><h4 id="_2-23-v-log-v" tabindex="-1">2.23 v = log(v) <a class="header-anchor" href="#_2-23-v-log-v" aria-label="Permalink to &quot;2.23 v = log(v)&quot;">​</a></h4><p>Natural logarithm (ln) operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = log(4)  # my_result= 1.3862</span></span></code></pre></div><h4 id="_2-24-v-log10-v" tabindex="-1">2.24 v = log10(v) <a class="header-anchor" href="#_2-24-v-log10-v" aria-label="Permalink to &quot;2.24 v = log10(v)&quot;">​</a></h4><p>Logarithm (log10) operation function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: variable type or number</p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = log10(3)    # my_result= 0.4771</span></span></code></pre></div><h4 id="_2-25-v-pow-v-v" tabindex="-1">2.25 v = pow(v, v) <a class="header-anchor" href="#_2-25-v-pow-v-v" aria-label="Permalink to &quot;2.25 v = pow(v, v)&quot;">​</a></h4><p>Power operation function.</p><ul><li><p>Input :<br> Two variable types or constant numbers<br> v: variable or constant that is a base of a power<br> v: variable or constant that is an exponent of a power</p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = pow(2,3)    # my_result= 8</span></span></code></pre></div><h4 id="_2-26-v-rand" tabindex="-1">2.26 v = rand() <a class="header-anchor" href="#_2-26-v-rand" aria-label="Permalink to &quot;2.26 v = rand()&quot;">​</a></h4><p>Random number generator function with a uniform distribution between 0 and 1.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> v : return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_result = rand()    # my_result= 0.1315</span></span>
<span class="line"><span>var my_result = rand()    # my_result= 0.7869</span></span>
<span class="line"><span>var my_result = rand()    # my_result= 0.4277</span></span></code></pre></div><h4 id="_2-27-v-arr-size-a" tabindex="-1">2.27 v = arr_size(a) <a class="header-anchor" href="#_2-27-v-arr-size-a" aria-label="Permalink to &quot;2.27 v = arr_size(a)&quot;">​</a></h4><p>Return size of array variable</p><ul><li><p>Input :<br> a: target array variable</p></li><li><p>Return :<br> v: return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_size</span></span>
<span class="line"><span>arr my_arr = {1,2,3,4}</span></span>
<span class="line"><span>my_size = arr_size(my_arr)    # my_size= 4</span></span></code></pre></div><h4 id="_2-28-a-arr-sub-a-v" tabindex="-1">2.28 a = arr_sub(a, v) <a class="header-anchor" href="#_2-28-a-arr-sub-a-v" aria-label="Permalink to &quot;2.28 a = arr_sub(a, v)&quot;">​</a></h4><p>Trims the source array to a given length, counting from the front.</p><ul><li><p>Input :<br> a: target array variable<br> v: target size</p></li><li><p>Return :<br> a: trimmed array</p></li></ul><h4 id="_2-29-a-arr-sub-a-v-v" tabindex="-1">2.29 a = arr_sub(a, v, v) <a class="header-anchor" href="#_2-29-a-arr-sub-a-v-v" aria-label="Permalink to &quot;2.29 a = arr_sub(a, v, v)&quot;">​</a></h4><p>Trims the source array to a given length, counting from given starting point.</p><ul><li><p>Input :<br> a: target array variable<br> v: starting point index<br> v: target size</p></li><li><p>Return :<br> a: trimmed array</p></li></ul><h4 id="_2-30-a-zyze-to-zyxe-a-a-xyze-to-zyxe-a-a-xyxe-to-zyxe-a-a-xzxe-to-zyxe-a-a-yzye-to-zyxe-a-a-yxye-to-zyxe-a-a-zxze-to-zyxe-a" tabindex="-1">2.30 a = zyzE_to_zyxE(a), a = xyzE_to_zyxE(a), a = xyxE_to_zyxE(a), a = xzxE_to_zyxE(a), a = yzyE_to_zyxE(a), a = yxyE_to_zyxE(a), a = zxzE_to_zyxE(a) <a class="header-anchor" href="#_2-30-a-zyze-to-zyxe-a-a-xyze-to-zyxe-a-a-xyxe-to-zyxe-a-a-xzxe-to-zyxe-a-a-yzye-to-zyxe-a-a-yxye-to-zyxe-a-a-zxze-to-zyxe-a" aria-label="Permalink to &quot;2.30 a = zyzE_to_zyxE(a), a = xyzE_to_zyxE(a), a = xyxE_to_zyxE(a), a = xzxE_to_zyxE(a), a = yzyE_to_zyxE(a), a = yxyE_to_zyxE(a), a = zxzE_to_zyxE(a)&quot;">​</a></h4><p>Convert Euler angles in 3by1 to Euler angles in 3by1 ZY&#39;X&#39;&#39;.</p><ul><li><p>Input :<br> a: Source Euler angle array (length should be 3)</p></li><li><p>Return :<br> a: Converted Euler angle array (ZY’X’’) (length = 3)</p></li></ul><h4 id="_2-31-a-zyze-to-r-a-a-xyze-to-r-a-a-xyxe-to-r-a-a-xzxe-to-r-a-a-yzye-to-r-a-a-yxye-to-r-a-a-zxze-to-r-a-a-zyxe-to-r-a" tabindex="-1">2.31 a = zyzE_to_R(a), a = xyzE_to_R(a), a = xyxE_to_R(a), a = xzxE_to_R(a), a = yzyE_to_R(a), a = yxyE_to_R(a), a = zxzE_to_R(a), a = zyxE_to_R(a) <a class="header-anchor" href="#_2-31-a-zyze-to-r-a-a-xyze-to-r-a-a-xyxe-to-r-a-a-xzxe-to-r-a-a-yzye-to-r-a-a-yxye-to-r-a-a-zxze-to-r-a-a-zyxe-to-r-a" aria-label="Permalink to &quot;2.31 a = zyzE_to_R(a), a = xyzE_to_R(a), a = xyxE_to_R(a), a = xzxE_to_R(a), a = yzyE_to_R(a), a = yxyE_to_R(a), a = zxzE_to_R(a), a = zyxE_to_R(a)&quot;">​</a></h4><p>Convert Euler angles of 3by1 to Rotation Matrix.</p><ul><li><p>Input :<br> a: Source Euler angle array (length should be 3)</p></li><li><p>Return :<br> a: Converted Rotation Matrix (length = 9)</p></li></ul><h4 id="_2-32-a-rxmat-v-a-rymat-v-a-rzmat-v" tabindex="-1">2.32 a = RxMat(v), a = RyMat(v), a = RzMat(v) <a class="header-anchor" href="#_2-32-a-rxmat-v-a-rymat-v-a-rzmat-v" aria-label="Permalink to &quot;2.32 a = RxMat(v), a = RyMat(v), a = RzMat(v)&quot;">​</a></h4><p>Generates a Rotation Matrix based on the input angles. Rx, Ry, and Rz represent the respective rotation axes.</p><ul><li><p>Input :<br> v: angle in degree unit</p></li><li><p>Return :<br> a: Converted Rotation Matrix (length = 9)</p></li></ul><h4 id="_2-33-a-r-tcp" tabindex="-1">2.33 a = R_TCP <a class="header-anchor" href="#_2-33-a-r-tcp" aria-label="Permalink to &quot;2.33 a = R_TCP&quot;">​</a></h4><p>Returns the current TCP&#39;s Rotation Matrix.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> a: Converted Rotation Matrix (length = 9)</p></li></ul><h4 id="_2-34-a-point-to-r-p-v" tabindex="-1">2.34 a = point_to_R(P, v) <a class="header-anchor" href="#_2-34-a-point-to-r-p-v" aria-label="Permalink to &quot;2.34 a = point_to_R(P, v)&quot;">​</a></h4><p>Extracts the Rotation Matrix from the input Point variable.</p><ul><li><p>Input :<br> P: target Point variable<br> v: Option<br></p><ul><li>0 : X,Y,Z,Rx,Ry,Rz Point -&gt; R</li><li>1 : X,Y,Z,Rz,Ry,Rx Point -&gt; R</li></ul></li><li><p>Return :<br> a: Converted Rotation Matrix (length = 9)</p></li></ul><h4 id="_2-35-a-rinverse-a-a-rtranspose-a" tabindex="-1">2.35 a = Rinverse(a), a = Rtranspose(a) <a class="header-anchor" href="#_2-35-a-rinverse-a-a-rtranspose-a" aria-label="Permalink to &quot;2.35 a = Rinverse(a), a = Rtranspose(a)&quot;">​</a></h4><p>Finds the Inverse (Transpose) of the Rotation Matrix.</p><ul><li><p>Input :<br> a: Source Rotation Matrix Array (length should be 9)</p></li><li><p>Return :<br> a: Converted Rotation Matrix (length = 9)</p></li></ul><h4 id="_2-36-a-r-x-r-a-a" tabindex="-1">2.36 a = R_x_R(a, a) <a class="header-anchor" href="#_2-36-a-r-x-r-a-a" aria-label="Permalink to &quot;2.36 a = R_x_R(a, a)&quot;">​</a></h4><p>Rotation Matrix Multiplication</p><ul><li><p>Input :<br> a: Source Rotation Matrix Array (length should be 9)<br> a: Source Rotation Matrix Array (length should be 9)</p></li><li><p>Return :<br> a: Converted Rotation Matrix (length = 9)</p></li></ul><h4 id="_2-37-a-r-x-v-a-a" tabindex="-1">2.37 a = R_x_V(a, a) <a class="header-anchor" href="#_2-37-a-r-x-v-a-a" aria-label="Permalink to &quot;2.37 a = R_x_V(a, a)&quot;">​</a></h4><p>Rotation Matrix and Vector (3by1) Multiplication</p><ul><li><p>Input :<br> a: Source Rotation Matrix Array (length should be 9)<br> a: Source Vector (length should be 3)</p></li><li><p>Return :<br> a: Multiplied Vector (length = 3)</p></li></ul><h4 id="_2-38-a-r-to-zyxe-a" tabindex="-1">2.38 a = R_to_zyxE(a) <a class="header-anchor" href="#_2-38-a-r-to-zyxe-a" aria-label="Permalink to &quot;2.38 a = R_to_zyxE(a)&quot;">​</a></h4><p>Convert Rotation Matrix into ZY’X’’ Euler angle</p><ul><li><p>Input :<br> a: Source Rotation Matrix Array (length should be 9)</p></li><li><p>Return :<br> a: Converted Euler angle array (length = 3)</p></li></ul><h3 id="_3-string-functions" tabindex="-1">3. STRING FUNCTIONS <a class="header-anchor" href="#_3-string-functions" aria-label="Permalink to &quot;3. STRING FUNCTIONS&quot;">​</a></h3><br><h4 id="_3-1-v-str-empty-s" tabindex="-1">3.1 v = str_empty(s) <a class="header-anchor" href="#_3-1-v-str-empty-s" aria-label="Permalink to &quot;3.1 v = str_empty(s)&quot;">​</a></h4><p>This function returns the presence or absence of data in a string.</p><ul><li><p>Input :<br> Single string type variable or constant string.<br> s: string type variable or constant string</p></li><li><p>Return :<br> v : return single number 0 or 1 <strong>(if string is empty 1, if it is not empty 0)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>string my_str1 = “rainbow”</span></span>
<span class="line"><span>string my_str2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var my_result1 = str_empty(my_str1)    # my_result1= 0</span></span>
<span class="line"><span>var my_result2 = str_empty(my_str2)    # my_result2= 1</span></span></code></pre></div><h4 id="_3-2-v-str-find-s-s" tabindex="-1">3.2 v = str_find(s, s) <a class="header-anchor" href="#_3-2-v-str-find-s-s" aria-label="Permalink to &quot;3.2 v = str_find(s, s)&quot;">​</a></h4><p>A function that returns the index of a string&#39;s position within another string.</p><ul><li><p>Input :<br> Two string type variables or constant strings.<br> s: reference string<br> s: string to find (target)</p></li><li><p>Return :<br> v: Returns a single number corresponding to the index.<br> : If it does not exist, it returns -1.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>string my_str1 = “rainbow_robotics”</span></span>
<span class="line"><span>string my_str2 = “robotics”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var my_result = str_find(my_str1, my_str2)  # my_result= 8</span></span></code></pre></div><h4 id="_3-3-v-str-len-s" tabindex="-1">3.3 v = str_len(s) <a class="header-anchor" href="#_3-3-v-str-len-s" aria-label="Permalink to &quot;3.3 v = str_len(s)&quot;">​</a></h4><p>A function that returns the length of a string.</p><ul><li><p>Input :<br> Single string type variable or constant string.<br> s: string type variable or constant string</p></li><li><p>Return :<br> v: return single number (length of the string)</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>string my_str = “rainbow_robotics”</span></span>
<span class="line"><span>var my_result = str_len(my_str)    # my_result= 16</span></span></code></pre></div><h4 id="_3-4-s-str-sub-s-v-v" tabindex="-1">3.4 s = str_sub(s, v, v) <a class="header-anchor" href="#_3-4-s-str-sub-s-v-v" aria-label="Permalink to &quot;3.4 s = str_sub(s, v, v)&quot;">​</a></h4><p>A function that truncates a string and returns part of it.</p><ul><li><p>Input :<br> Single string type variable or constant string, and two variable types.<br> s: reference string<br> v: starting index for truncation (variable type or number)<br> v: length for truncation (variable type or number)</p></li><li><p>Return :<br> s: return truncated string</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>string my_str = “rainbow_robotics”</span></span>
<span class="line"><span>string my_result = str_sub(my_str, 3, 7)    # my_result= “nbow_ro”</span></span></code></pre></div><h4 id="_3-5-s-str-cat-s-s" tabindex="-1">3.5 s = str_cat(s, s) <a class="header-anchor" href="#_3-5-s-str-cat-s-s" aria-label="Permalink to &quot;3.5 s = str_cat(s, s)&quot;">​</a></h4><p>A function that concatenates strings together.</p><ul><li><p>Input :<br> Two string type variables or constant strings.<br> s: First string<br> s: Second string</p></li><li><p>Return :<br> s: return added string</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>string my_str1 = “hi”</span></span>
<span class="line"><span>string my_str2 = “rainbow”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>string my_res = str_cat(my_str1, my_str2)     # my_res= “hirainbow”</span></span>
<span class="line"><span>string my_res2 = my_str1 + my_str2            # ’+’ operator returns same result</span></span>
<span class="line"><span>string my_res3 = “My name” + “ is “ + “RB!”   # my_res3= “My name is RB!”</span></span></code></pre></div><h4 id="_3-6-v-str-cmp-s-s" tabindex="-1">3.6 v = str_cmp(s, s) <a class="header-anchor" href="#_3-6-v-str-cmp-s-s" aria-label="Permalink to &quot;3.6 v = str_cmp(s, s)&quot;">​</a></h4><p>A function that compares strings with each other.</p><ul><li><p>Input :<br> Two string type variables or constant strings.<br> s: single string for reference<br> s: single string for comparing target</p></li><li><p>Return :<br> v: Returns 0 if the strings are equal, or a single non-zero number if they are different.<br> If the strings are not equal, compares the first unequal character and returns a single number with a value greater than zero if the base string is greater than the comparison string and less than zero if the string is less than.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>string my_str1 = “hello”</span></span>
<span class="line"><span>string my_str2 = “hello”</span></span>
<span class="line"><span>string my_str3 = “hgello”</span></span>
<span class="line"><span>string my_str4 = “Hello”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var my_result1 = str_cmp(my_str1, my_str2)  # my_result1= 0</span></span>
<span class="line"><span>var my_result2 = str_cmp(my_str2, my_str3)  # my_result2= -2  … compare e(101) and g(103)</span></span>
<span class="line"><span>var my_result3 = str_cmp(my_str3, my_str2)  # my_result3= 2   … compare g(103) and e(101)</span></span>
<span class="line"><span>var my_result4 = str_cmp(my_str1, my_str4)  # my_result4= 32  … compare h(104) and (72)</span></span></code></pre></div><h4 id="_3-7-v-to-num-s" tabindex="-1">3.7 v = to_num(s) <a class="header-anchor" href="#_3-7-v-to-num-s" aria-label="Permalink to &quot;3.7 v = to_num(s)&quot;">​</a></h4><p>Convert character (string) numbers to real-number</p><ul><li><p>Input :<br> Single string type variable or constant string.<br> s: string type variable or constant string</p></li><li><p>Return :<br> v: return single number</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str my_string = “123.45”</span></span>
<span class="line"><span>var my_result = to_num(my_string)   # my_result= 123.45</span></span></code></pre></div><h4 id="_3-8-s-to-str-v-s-to-str-a-s-to-str-p-s-to-str-j" tabindex="-1">3.8 s = to_str (v), s = to_str (a), s = to_str (P), s = to_str (J) <a class="header-anchor" href="#_3-8-s-to-str-v-s-to-str-a-s-to-str-p-s-to-str-j" aria-label="Permalink to &quot;3.8 s = to_str (v), s = to_str (a), s = to_str (P), s = to_str (J)&quot;">​</a></h4><h4 id="s-to-str-raw-v-s-to-str-raw-a-s-to-str-raw-p-s-to-str-raw-j" tabindex="-1">s = to_str_raw (v), s = to_str_raw (a), s = to_str_raw (P), s = to_str_raw (J) <a class="header-anchor" href="#s-to-str-raw-v-s-to-str-raw-a-s-to-str-raw-p-s-to-str-raw-j" aria-label="Permalink to &quot;s = to_str_raw (v), s = to_str_raw (a), s = to_str_raw (P), s = to_str_raw (J)&quot;">​</a></h4><p>Convert variable/point/joint types to string type expression</p><ul><li><p>Input :<br> Single variable type or array type or point type or joint type<br> v/a/P/J: variable type or array type or number or point type or joint type</p></li><li><p>Return :<br> s: return string</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_value = 123.45</span></span>
<span class="line"><span>str my_result = to_str(my_value)        # my_result= “123.45”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>point my_point = {100,200,300,90,0,0}</span></span>
<span class="line"><span>str my_result = to_str(my_point)        # my_result=“{100,200,300,90,0,0}”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>joint my_joint = {90,0,0,90,0,0}</span></span>
<span class="line"><span>str my_result = to_str(my_joint)        # my_result= “{90,0,0,90,0,0}”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>point my_point = {100,200,300,90,0,0}</span></span>
<span class="line"><span>str my_result = to_str_raw(my_point)    # my_result=“100,200,300,90,0,0”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>joint my_joint = {90,0,0,90,0,0}</span></span>
<span class="line"><span>str my_result = to_str_raw(my_joint)    # my_result= “90,0,0,90,0,0”</span></span></code></pre></div><h4 id="_3-9-s-to-str-int-v" tabindex="-1">3.9 s = to_str_int(v) <a class="header-anchor" href="#_3-9-s-to-str-int-v" aria-label="Permalink to &quot;3.9 s = to_str_int(v)&quot;">​</a></h4><p>Converts a single number to a string of integers.</p><ul><li><p>Input :<br> Single string type variable or constant string.<br> s: string type variable or constant string</p></li><li><p>Return :<br> s: return string</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_value = 123.45</span></span>
<span class="line"><span>str my_result = to_str_int(my_value)    # my_result= “123”</span></span></code></pre></div><h4 id="_3-10-a-str-parse-s-s-s-s" tabindex="-1">3.10 a = str_parse(s, s, s, s) <a class="header-anchor" href="#_3-10-a-str-parse-s-s-s-s" aria-label="Permalink to &quot;3.10 a = str_parse(s, s, s, s)&quot;">​</a></h4><p>Parses a string containing header and tail and stores it in the form of a numeric array.</p><ul><li><p>Input :<br> s: Source string. string type variable or constant string<br> s: Header string. string type variable or constant string<br> s: Tail string. string type variable or constant string<br> s: Separator string. string type variable or constant string</p></li><li><p>Return :<br> a: return array type</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str my_source_str = “S43,22,31,44,-5”</span></span>
<span class="line"><span>var my_result = str_parse(my_source_str, “S”, “”, “,”)</span></span>
<span class="line"><span># my_result[0] = 5 // number of elements</span></span>
<span class="line"><span># my_result[1] = 43, my_result[2] = 22, my_result[3] = 31, my_result[4] = 44, my_result[5] = -5</span></span>
<span class="line"><span></span></span>
<span class="line"><span>str my_source_str = “S{43/22/31/44}E”</span></span>
<span class="line"><span>var my_result = str_parse(my_source_str, “S{”, “}E”, “/”)</span></span>
<span class="line"><span># my_result[0] = 4 // number of elements</span></span>
<span class="line"><span># my_result[1] = 43, my_result[2] = 22, my_result[3] = 31, my_result[4] = 44</span></span>
<span class="line"><span></span></span>
<span class="line"><span>str my_source_str = “-100,200,-300”</span></span>
<span class="line"><span>var my_result = str_parse(my_source_str, “”, “”, “,”)</span></span>
<span class="line"><span># my_result[0] = 3 // number of elements</span></span>
<span class="line"><span># my_result[1] = -100, my_result[2] = 200, my_result[3] = -300</span></span>
<span class="line"><span></span></span>
<span class="line"><span>str my_source_str = “STX-100$200$-300ETX”</span></span>
<span class="line"><span>var my_result = str_parse(my_source_str, “STX”, “ETX”, “$”)</span></span>
<span class="line"><span># my_result[0] = 3 // number of elements</span></span>
<span class="line"><span># my_result[1] = -100, my_result[2] = 200, my_result[3] = -300</span></span></code></pre></div><h3 id="_4-bit-functions" tabindex="-1">4. BIT FUNCTIONS <a class="header-anchor" href="#_4-bit-functions" aria-label="Permalink to &quot;4. BIT FUNCTIONS&quot;">​</a></h3><br><h4 id="_4-1-v-get-bit-v-v" tabindex="-1">4.1 v = get_bit(v, v) <a class="header-anchor" href="#_4-1-v-get-bit-v-v" aria-label="Permalink to &quot;4.1 v = get_bit(v, v)&quot;">​</a></h4><p>A function that obtains the bit of a specific bit position from a variable or constant.</p><ul><li><p>Input :<br> Two variable types or constant numbers<br> v: Target variable or number for the bit aquisition.<br> v: Target bit index (position). Bit index is starting from 0.</p></li><li><p>Return :<br> v: Bit value (0 or 1)</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>                                # 1234 = 0b10011010010</span></span>
<span class="line"><span>var my_bit = get_bit(1234, 3)   # my_bit= 0</span></span></code></pre></div><h4 id="_4-2-set-bit-v-v" tabindex="-1">4.2 set_bit(v, v) <a class="header-anchor" href="#_4-2-set-bit-v-v" aria-label="Permalink to &quot;4.2 set_bit(v, v)&quot;">​</a></h4><p>This is a function that changes the bit at a specific bit position in variable to 1.</p><ul><li><p>Input :<br> Two variable types or constant numbers<br> v: Target variable or number for the bit set<br> v: Target bit index (position). Bit index is starting from 0.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_var = 1234    # 1234 = 0b10011010010</span></span>
<span class="line"><span>set_bit(my_var, 3)   # my_var= 1242</span></span></code></pre></div><h4 id="_4-3-clear-bit-v-v" tabindex="-1">4.3 clear_bit(v, v) <a class="header-anchor" href="#_4-3-clear-bit-v-v" aria-label="Permalink to &quot;4.3 clear_bit(v, v)&quot;">​</a></h4><p>This is a function that changes the bit at a specific bit position in variable to 0.</p><ul><li><p>Input :<br> Two variable types or constant numbers<br> v: Target variable or number for the bit clear<br> v: Target bit index (position). Bit index is starting from 0.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_var = 1234       # 1234 = 0b10011010010</span></span>
<span class="line"><span>clear_bit(my_var, 1)    # my_var= 1232</span></span></code></pre></div><h4 id="_4-4" tabindex="-1">4.4 &lt;&lt;, &gt;&gt;, &amp;, | <a class="header-anchor" href="#_4-4" aria-label="Permalink to &quot;4.4 &lt;&lt;, &gt;&gt;, &amp;, |&quot;">​</a></h4><p>Bit shift operators, Bit and / or operators<br> Can use when bit-shifting or bit and/or operation.</p><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Var my_num = 12             # my_num = 0b1100</span></span>
<span class="line"><span>Var my_num2 = my_num &lt;&lt; 2   # my_num2 = 48 (0b110000)</span></span></code></pre></div><h3 id="_5-system-functions" tabindex="-1">5. SYSTEM FUNCTIONS <a class="header-anchor" href="#_5-system-functions" aria-label="Permalink to &quot;5. SYSTEM FUNCTIONS&quot;">​</a></h3><br><h4 id="_5-1-halt" tabindex="-1">5.1 halt <a class="header-anchor" href="#_5-1-halt" aria-label="Permalink to &quot;5.1 halt&quot;">​</a></h4><p>Stop any program flow or action/movement.</p><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>halt</span></span></code></pre></div><h4 id="_5-2-task-stop" tabindex="-1">5.2 task stop <a class="header-anchor" href="#_5-2-task-stop" aria-label="Permalink to &quot;5.2 task stop&quot;">​</a></h4><p>Stop any program flow or action/movement.</p><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>task stop</span></span></code></pre></div><h4 id="_5-3-mc-jall-init" tabindex="-1">5.3 mc jall init <a class="header-anchor" href="#_5-3-mc-jall-init" aria-label="Permalink to &quot;5.3 mc jall init&quot;">​</a></h4><p>Apply DC power to the robot arm and turn the servo-on to activate it. (Activation)</p><h4 id="_5-4-pgmode-real" tabindex="-1">5.4 pgmode real <a class="header-anchor" href="#_5-4-pgmode-real" aria-label="Permalink to &quot;5.4 pgmode real&quot;">​</a></h4><p>Switch the robot&#39;s operating mode to &#39;Real-Robot&#39;.</p><h4 id="_5-5-pgmode-simulation" tabindex="-1">5.5 pgmode simulation <a class="header-anchor" href="#_5-5-pgmode-simulation" aria-label="Permalink to &quot;5.5 pgmode simulation&quot;">​</a></h4><p>Switch the robot&#39;s operating mode to Simulation&#39;.</p><h4 id="_5-6-program-load-and-run-s" tabindex="-1">5.6 program_load_and_run(s) <a class="header-anchor" href="#_5-6-program-load-and-run-s" aria-label="Permalink to &quot;5.6 program_load_and_run(s)&quot;">​</a></h4><p>Load and Run the target project/program</p><ul><li><p>Input :<br> s: Name of the target project in string type.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>program_load_and_run(“my_project”)</span></span>
<span class="line"><span>program_load_and_run(“hello_world_v90”)</span></span></code></pre></div><h4 id="_5-7-task-load-your-project-name" tabindex="-1">5.7 task load your_project_name <a class="header-anchor" href="#_5-7-task-load-your-project-name" aria-label="Permalink to &quot;5.7 task load your_project_name&quot;">​</a></h4><p>Load saved project file</p><ul><li><p>Input :<br> Name of project/program wsl name</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>task load hello_world</span></span>
<span class="line"><span>task load my_project_123</span></span></code></pre></div><h4 id="_5-8-task-play-once" tabindex="-1">5.8 task play once <a class="header-anchor" href="#_5-8-task-play-once" aria-label="Permalink to &quot;5.8 task play once&quot;">​</a></h4><p>Run/execute the loaded-program.</p><h4 id="_5-9-task-stop" tabindex="-1">5.9 task stop <a class="header-anchor" href="#_5-9-task-stop" aria-label="Permalink to &quot;5.9 task stop&quot;">​</a></h4><p>Stop any program flow or action/movement.</p><h4 id="_5-10-task-pause" tabindex="-1">5.10 task pause <a class="header-anchor" href="#_5-10-task-pause" aria-label="Permalink to &quot;5.10 task pause&quot;">​</a></h4><p>Pause the program/motion running.</p><h4 id="_5-11-task-resume-a" tabindex="-1">5.11 task resume_a <a class="header-anchor" href="#_5-11-task-resume-a" aria-label="Permalink to &quot;5.11 task resume_a&quot;">​</a></h4><p>Resume from “general pause condition”</p><h4 id="_5-12-task-resume-b" tabindex="-1">5.12 task resume_b <a class="header-anchor" href="#_5-12-task-resume-b" aria-label="Permalink to &quot;5.12 task resume_b&quot;">​</a></h4><p>Resume from “collision detection situation”</p><h4 id="_5-13-v-pattern-get-count-v" tabindex="-1">5.13 v = pattern_get_count(v) <a class="header-anchor" href="#_5-13-v-pattern-get-count-v" aria-label="Permalink to &quot;5.13 v = pattern_get_count(v)&quot;">​</a></h4><p>A function to obtain the current index of the grid that is being performed by the pattern function.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: Pattern number (Confirmation of assigned number is required.)<br> : The pattern unique number is set in the pattern action.</p></li><li><p>Return :<br> v: Returns the current index of the grid.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var current_count = pattern_get_count(6691)   # Get the current grid index of pattern number 6691.</span></span></code></pre></div><h4 id="_5-14-pattern-set-count-v-v" tabindex="-1">5.14 pattern_set_count(v, v) <a class="header-anchor" href="#_5-14-pattern-set-count-v-v" aria-label="Permalink to &quot;5.14 pattern_set_count(v, v)&quot;">​</a></h4><p>A function that forcibly sets the index of the grid that does the work in the pattern function.</p><ul><li><p>Input :<br> Two variable types or constant numbers<br> v: Pattern number (Confirmation of assigned number is required.)<br> : The pattern unique number is set in the pattern action.<br> v: Desired grid index<br> : If the pattern is a 2D flat pattern, and there are grid points of 3x5 = 15, the configurable indices are 0 to 14.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pattern_set_count(6691, 3)  # Set the grid index of pattern number 6691 to 3.</span></span></code></pre></div><h4 id="_5-15-p-calc-fk-tcp-v-v-v-v-v-v-p-calc-fk-tcp-j" tabindex="-1">5.15 P = calc_fk_tcp(v, v, v, v, v, v), P = calc_fk_tcp(J) <a class="header-anchor" href="#_5-15-p-calc-fk-tcp-v-v-v-v-v-v-p-calc-fk-tcp-j" aria-label="Permalink to &quot;5.15 P = calc_fk_tcp(v, v, v, v, v, v), P = calc_fk_tcp(J)&quot;">​</a></h4><p>Calculate TCP posture w.r.t. global (base) coordinate from six joint angles.</p><ul><li><p>Input type 1:<br> Six variable types or constant numbers.<br> v, v, v, v, v, v: six joint angles (Unit: Degree)</p></li><li><p>Input type 2:<br> J: Single joint type variable which contains six joint-angles.</p></li><li><p>Return :<br> P: Point type variable which contains TCP posture w.r.t. global (base) coordinate</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>joint my_joint = {0,0,0,0,0,0}</span></span>
<span class="line"><span>point my_result = calc_fk_tcp(my_joint)     # my_result= {0, -207.62, 1100.59, 0, 0, 0}</span></span>
<span class="line"><span>                                            # Depending on the TCP setting or robot model, the result may be different.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>point my_result = calc_fk_tcp(0,0,0,0,0,0)  # Same result will be return to ‘my_result’</span></span></code></pre></div><h4 id="_5-16-p-calc-fk-tfc-v-v-v-v-v-v-p-calc-fk-tfc-j" tabindex="-1">5.16 P = calc_fk_tfc(v, v, v, v, v, v), P = calc_fk_tfc(J) <a class="header-anchor" href="#_5-16-p-calc-fk-tfc-v-v-v-v-v-v-p-calc-fk-tfc-j" aria-label="Permalink to &quot;5.16 P = calc_fk_tfc(v, v, v, v, v, v), P = calc_fk_tfc(J)&quot;">​</a></h4><p>Calculate TFC (Tool Flange Center) posture w.r.t. global (base) coordinate from six joint angles.<br><strong>※ The tool flange is where the gripper/tool is mounted on the robot.</strong></p><ul><li><p>Input type 1:<br> Six variable types or constant numbers.<br> v, v, v, v, v, v: six joint angles (Unit: Degree)</p></li><li><p>Input type 2:<br> J: Single joint type variable which contains six joint-angles.</p></li><li><p>Return :<br> P: Point type variable which contains TFC posture w.r.t. global (base) coordinate</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>joint my_joint = {0,0,0,0,0,0}</span></span>
<span class="line"><span>point my_result = calc_fk_tfc(my_joint)     # my_result= {0, -207.62,1100.59,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>point my_result = calc_fk_tfc(0,0,0,0,0,0)  # Same result will be return to ‘my_result’</span></span></code></pre></div><h4 id="_5-17-v-point-dist-p-p" tabindex="-1">5.17 v = point_dist(P, P) <a class="header-anchor" href="#_5-17-v-point-dist-p-p" aria-label="Permalink to &quot;5.17 v = point_dist(P, P)&quot;">​</a></h4><p>Calculates the distance between two points.</p><ul><li><p>Input :<br> Two Point type variables.<br> P: Target point 1<br> P: Target point 2</p></li><li><p>Return :<br> v: return single number (distance).</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_ptr1 = {100, 200, 300, 0, 0, 0}</span></span>
<span class="line"><span>point my_ptr2 = {100, 200, 200, 0, 0, 0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var my_result = point_dist(my_ptr1, my_ptr2)   # my_result= 100</span></span></code></pre></div><h4 id="_5-18-p-point-add-p-p" tabindex="-1">5.18 P = point_add(P, P) <a class="header-anchor" href="#_5-18-p-point-add-p-p" aria-label="Permalink to &quot;5.18 P = point_add(P, P)&quot;">​</a></h4><p>Calculates the addition of two points.</p><ul><li><p>Input :<br> Two Point type variables.<br> P: Target point 1<br> P: Target point 2</p></li><li><p>Return :<br> v: Returns point, which is the result of adding two points.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_ptr1 = {100, 0, 300, 150, 0, 30}</span></span>
<span class="line"><span>point my_ptr2 = {100, 200, 300, 90, 0, 90}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>point my_result = point_add(my_ptr1, my_ptr2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># my_result= {200, 200, 600, -90, -30, -60}</span></span>
<span class="line"><span># x,y,z Distance values are treated as simple arithmetic operations.</span></span>
<span class="line"><span># Rx,Ry,Rz Rotation values are treated as rotation matrix operations.</span></span></code></pre></div><h4 id="_5-19-p-point-sub-p-p" tabindex="-1">5.19 P = point_sub(P, P) <a class="header-anchor" href="#_5-19-p-point-sub-p-p" aria-label="Permalink to &quot;5.19 P = point_sub(P, P)&quot;">​</a></h4><p>Calculates the subtraction of two points.</p><ul><li><p>Input :<br> Two Point type variables.<br> P: Target point 1<br> P: Target point 2</p></li><li><p>Return :<br> v: Returns point, which is the result of subtraction of two points.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_ptr1 = {100, 0, 300, 150, 0, 30}</span></span>
<span class="line"><span>point my_ptr2 = {100, 200, 300, 90, 0, 90}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>point my_result = point_sub(my_ptr1, my_ptr2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># my_result= {0, -200, 0, 0, 60, -60}</span></span>
<span class="line"><span># x,y,z Distance values are treated as simple arithmetic operations.</span></span>
<span class="line"><span># Rx,Ry,Rz Rotation values are treated as rotation matrix operations.</span></span></code></pre></div><h4 id="_5-20-p-point-mid-p-p" tabindex="-1">5.20 P = point_mid(P, P) <a class="header-anchor" href="#_5-20-p-point-mid-p-p" aria-label="Permalink to &quot;5.20 P = point_mid(P, P)&quot;">​</a></h4><p>Calculates the midpoint between two points.</p><ul><li><p>Input :<br> Two Point type variables.<br> P: Target point 1<br> P: Target point 2</p></li><li><p>Return :<br> P: Returns the point that is the midpoint between two points.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_ptr1 = {100, 0, 300, 150, 0, 30}</span></span>
<span class="line"><span>point my_ptr2 = {100, 200, 300, 90, 0, 90}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>point my_result = point_mid(my_ptr1, my_ptr2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># my_result= {100, 100, 300, 120, -8.21, 60}</span></span>
<span class="line"><span># x,y,z Distance values are treated as simple arithmetic operations.</span></span>
<span class="line"><span># Rx,Ry,Rz Rotation values are treated as rotation matrix operations.</span></span></code></pre></div><h4 id="_5-21-p-point-interpolate-p-p-v" tabindex="-1">5.21 P = point_interpolate(P, P, v) <a class="header-anchor" href="#_5-21-p-point-interpolate-p-p-v" aria-label="Permalink to &quot;5.21 P = point_interpolate(P, P, v)&quot;">​</a></h4><p>Computes the interpolation point between two points.</p><ul><li><p>Input :<br> Two Point type variables and single variable/number are required<br> P: Target point 1<br> P: Target point 2<br> v: Weight factor for interpolation (0 ~ 1)</p></li><li><p>Return :<br> P: Returns a point that is the result of interpolation between two points.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_ptr1 = {100, 0, 300, 150, 0, 30}</span></span>
<span class="line"><span>point my_ptr2 = {100, 200, 300, 90, 0, 90}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>point my_result = point_interpolate(my_ptr1, my_ptr2, 0.1)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># my_result= {100, 20, 300, 144.43, -2.86, 35.37}</span></span>
<span class="line"><span># x,y,z Distance values are treated as simple arithmetic operations.</span></span>
<span class="line"><span># Rx,Ry,Rz Rotation values are treated as rotation matrix operations.</span></span></code></pre></div><h4 id="_5-22-p-point-trans-g2u-p-v" tabindex="-1">5.22 P = point_trans_g2u(P, v) <a class="header-anchor" href="#_5-22-p-point-trans-g2u-p-v" aria-label="Permalink to &quot;5.22 P = point_trans_g2u(P, v)&quot;">​</a></h4><p>Converts the attitude value stored in the Point variable from the global (base) coordinate system to the user coordinate system.</p><ul><li><p>Input :<br> Single Point type variable and single number.<br> P: Target point<br> v: User coordinate number <strong>(User coordinate: 0, 1, 2)</strong></p></li><li><p>Return :<br> P: Returns the converted point coordinate value.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_global_p</span></span>
<span class="line"><span>point my_local_p = point_trans_g2u(my_global_p, 0)</span></span></code></pre></div><h4 id="_5-23-p-point-trans-u2g-p-v" tabindex="-1">5.23 P = point_trans_u2g(P, v) <a class="header-anchor" href="#_5-23-p-point-trans-u2g-p-v" aria-label="Permalink to &quot;5.23 P = point_trans_u2g(P, v)&quot;">​</a></h4><p>Converts the attitude value stored in the Point variable from the user coordinate system to the global (base) coordinate system.</p><ul><li><p>Input :<br> Single Point type variable and single number.<br> P: Target point<br> v: User coordinate number <strong>(User coordinate: 0, 1, 2)</strong></p></li><li><p>Return :<br> P: Returns the converted point coordinate value.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_local_p</span></span>
<span class="line"><span>point my_global_p = point_trans_u2g(my_local_p, 0)</span></span></code></pre></div><h4 id="_5-24-p-get-tcp-info" tabindex="-1">5.24 P = get_tcp_info() <a class="header-anchor" href="#_5-24-p-get-tcp-info" aria-label="Permalink to &quot;5.24 P = get_tcp_info()&quot;">​</a></h4><p>This function returns the TCP information of the current robot.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> P: Returns the TCP of the current robot based on the global coordinate system. <strong>(Unit: mm &amp; degree)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_result = get_tcp_info()   # TCP posture information will be stored in ‘my_result’</span></span></code></pre></div><h4 id="_5-25-p-get-tfc-info" tabindex="-1">5.25 P = get_tfc_info() <a class="header-anchor" href="#_5-25-p-get-tfc-info" aria-label="Permalink to &quot;5.25 P = get_tfc_info()&quot;">​</a></h4><p>This function returns the TFC (Tool flange center) information of the current robot.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> P: Returns the TFC of the current robot based on the global coordinate system. <strong>(Unit: mm &amp; degree)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_result = get_tfc_info()   # TFC posture information will be stored in ‘my_result’</span></span></code></pre></div><h4 id="_5-26-j-joint-add-j-j" tabindex="-1">5.26 J = joint_add(J, J) <a class="header-anchor" href="#_5-26-j-joint-add-j-j" aria-label="Permalink to &quot;5.26 J = joint_add(J, J)&quot;">​</a></h4><p>Calculates the addition of the angles of two Joints.</p><ul><li><p>Input :<br> Two Joint type variables<br> J: Target joint 1<br> J: Target joint 2</p></li><li><p>Return :<br> J: Returns the joint, which is the result of the addition operation of two joints.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>joint my_joint1 = {45, 15, 0, 0, 0, 90}</span></span>
<span class="line"><span>joint my_joint2 = {0, 45, 45, 15, 0, 0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>joint my_result = joint_add(my_joint1, my_joint2)   # my_result= {45,60,45,15,0,90}</span></span></code></pre></div><h4 id="_5-27-j-joint-sub-j-j" tabindex="-1">5.27 J = joint_sub(J, J) <a class="header-anchor" href="#_5-27-j-joint-sub-j-j" aria-label="Permalink to &quot;5.27 J = joint_sub(J, J)&quot;">​</a></h4><p>This function calculates the subtraction of two joint angles.</p><ul><li><p>Input :<br> Two Joint type variables<br> J: Target joint 1<br> J: Target joint 2</p></li><li><p>Return :<br> J: Returns the joint, which is the result of the subtraction operation of two joints.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>joint my_joint1 = {45, 15, 0, 0, 0, 90}</span></span>
<span class="line"><span>joint my_joint2 = {0, 45, 45, 15, 0, 0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>joint my_result = joint_sub(my_joint1, my_joint2)   # my_result= {45,-30,-45,-15,0,90}</span></span></code></pre></div><h4 id="_5-28-j-joint-mid-j-j" tabindex="-1">5.28 J = joint_mid(J, J) <a class="header-anchor" href="#_5-28-j-joint-mid-j-j" aria-label="Permalink to &quot;5.28 J = joint_mid(J, J)&quot;">​</a></h4><p>Computes the intermediate joint between two joint angles.</p><ul><li><p>Input :<br> Two Joint type variables.<br> J: Target joint 1<br> J: Target joint 2</p></li><li><p>Return :<br> J: Returns the joint that is the result of the intermediate joint operation of two joints.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>joint my_joint1 = {45, 15, 0, 15, 0, 90}</span></span>
<span class="line"><span>joint my_joint2 = {45, 15, 0, 15, 0, 0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>joint my_result = joint_mid(my_joint1, my_joint2)   # my_result= {45, 15, 0, 15, 0, 45}</span></span></code></pre></div><h4 id="_5-29-j-joint-interpolate-j-j-v" tabindex="-1">5.29 J = joint_interpolate(J, J, v) <a class="header-anchor" href="#_5-29-j-joint-interpolate-j-j-v" aria-label="Permalink to &quot;5.29 J = joint_interpolate(J, J, v)&quot;">​</a></h4><p>Computes the interpolation joint between two joint angles.</p><ul><li><p>Input :<br> Two Joint type variables and single variable/number are required<br> J: Target joint 1<br> J: Target joint 2<br> v: Weight factor for interpolation (0 ~ 1)</p></li><li><p>Return :<br> J: Returns a joint that is the result of interpolation between two joints.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>joint my_joint1 = {45, 15, 0, 15, 0, 90}</span></span>
<span class="line"><span>joint my_joint2 = {45, 15, 0, 15, 0, 0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>joint my_result = joint_interpolate(my_joint1, my_joint2, 0.1)</span></span>
<span class="line"><span># my_result= {45, 15, 0, 15, 0, 81}</span></span></code></pre></div><h4 id="_5-30-j-get-joint-info" tabindex="-1">5.30 J = get_joint_info() <a class="header-anchor" href="#_5-30-j-get-joint-info" aria-label="Permalink to &quot;5.30 J = get_joint_info()&quot;">​</a></h4><p>Returns the current joint angle information.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> J: It returns the joint information of the current robot based on the joint coordinate system. <strong>(Unit: degree)</strong></p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>joint my_result = get_joint_info()  # current robot’s joint angles will be return to ‘my_result’</span></span></code></pre></div><h4 id="_5-31-set-payload-info-v-v-v-v" tabindex="-1">5.31 set_payload_info(v, v, v, v) <a class="header-anchor" href="#_5-31-set-payload-info-v-v-v-v" aria-label="Permalink to &quot;5.31 set_payload_info(v, v, v, v)&quot;">​</a></h4><p>Set the tool payload w.r.t. the manufacturer’s default tool coordinate system.</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> If this function is not called in program-flow, the value set in the Setup page is used. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Four variable types or constant numbers.<br> v: payload weight <strong>(Unit: kg)</strong><br> v: payload Center of mass x-axis value <strong>(Unit: mm)</strong><br> v: payload Center of mass y-axis value <strong>(Unit: mm</strong>)<br> v: payload Center of mass z-axis value <strong>(Unit: mm)</strong></p><ul><li>Three values entered are based on the manufacturer&#39;s default tool coordinate system.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_payload_info(3, 0, -50, 0)  # Set payload as 3kg, and center-of-mass as (0mm,-50mm, 0mm).</span></span></code></pre></div><h4 id="_5-32-set-tcp-info-v-v-v-v-v-v" tabindex="-1">5.32 set_tcp_info(v, v, v, v, v, v) <a class="header-anchor" href="#_5-32-set-tcp-info-v-v-v-v-v-v" aria-label="Permalink to &quot;5.32 set_tcp_info(v, v, v, v, v, v)&quot;">​</a></h4><p>Set the TCP position and orientation w.r.t. the manufacturer’s default tool coordinate system.</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> If this function is not called in program-flow, the value set in the Setup page is used. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Six variable types or constant numbers.<br> v: TCP’s x-value <strong>(Unit: mm)</strong><br> v: TCP’s y-value <strong>(Unit: mm)</strong><br> v: TCP’s z-value <strong>(Unit: mm)</strong><br> v: TCP’s Rx-value <strong>(Unit: degree)</strong><br> v: TCP’s Ry-value <strong>(Unit: degree)</strong><br> v: TCP’s Rz-value <strong>(Unit: degree)</strong></p><ul><li>Six values entered are based on the manufacturer&#39;s default tool coordinate system.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_tcp_info(0, -100, 0, 0, 0, 0)  # Set TCP position as (0mm,-100mm, 0mm).</span></span></code></pre></div><h4 id="_5-33-set-collision-onoff-v" tabindex="-1">5.33 set_collision_onoff(v) <a class="header-anchor" href="#_5-33-set-collision-onoff-v" aria-label="Permalink to &quot;5.33 set_collision_onoff(v)&quot;">​</a></h4><p>This function turns on/off the collision detection function.</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> If this function is not called in program-flow, the value set in the Setup page is used. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Single variable type or constant number<br> v: 0 is off , 1 is on.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_collision_onoff(1)  # Turn on the collision detection function.</span></span></code></pre></div><h4 id="_5-34-set-collision-th-v" tabindex="-1">5.34 set_collision_th(v) <a class="header-anchor" href="#_5-34-set-collision-th-v" aria-label="Permalink to &quot;5.34 set_collision_th(v)&quot;">​</a></h4><p>Sets the collision sensitivity (threshold).</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> If this function is not called in program-flow, the value set in the Setup page is used. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Single variable type or constant number<br> v: Value between 0 ~ 1. The lower the value, the more sensitive to collision. (0 ~ 1)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_collision_th(0.1)   # Set the collision threshold as 10%.</span></span></code></pre></div><h4 id="_5-35-set-collision-mode-v" tabindex="-1">5.35 set_collision_mode(v) <a class="header-anchor" href="#_5-35-set-collision-mode-v" aria-label="Permalink to &quot;5.35 set_collision_mode(v)&quot;">​</a></h4><p>Set the stop-mode after the collision detection.</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> If this function is not called in program-flow, the value set in the Setup page is used. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Single variable type or constant number<br> v: Stop mode.</p><ul><li>0 = General Stop</li><li>1 = Evasion Stop</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_collision_mode(1)</span></span>
<span class="line"><span># After detecting a collision, the robot moves a little in the direction to avoid external force and then stops the movement.</span></span></code></pre></div><h4 id="_5-36-set-collision-after-v" tabindex="-1">5.36 set_collision_after(v) <a class="header-anchor" href="#_5-36-set-collision-after-v" aria-label="Permalink to &quot;5.36 set_collision_after(v)&quot;">​</a></h4><p>Set the program flow direction after the collision detection.</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Single variable type or constant number<br> v: Stop mode</p><ul><li>0 = Pause the Program flow <strong>(default)</strong></li><li>1 = Halt/Stop the Program flow</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_collision_after(1)  # After detecting an external collision, the program flow stops (ends).</span></span></code></pre></div><h4 id="_5-37-set-speed-multiply-v" tabindex="-1">5.37 set_speed_multiply(v) <a class="header-anchor" href="#_5-37-set-speed-multiply-v" aria-label="Permalink to &quot;5.37 set_speed_multiply(v)&quot;">​</a></h4><p>Sets the overall speed (velocity) multiplier.</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Single variable type or constant number<br> v: Multiply value <strong>(0 ~ 2) (default: 1)</strong></p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var speed_override = 1.5</span></span>
<span class="line"><span>set_speed_multiply(speed_override)  # Desired-speed = 1.5 x original-speed</span></span></code></pre></div><h4 id="_5-38-set-acc-multiply-v" tabindex="-1">5.38 set_acc_multiply(v) <a class="header-anchor" href="#_5-38-set-acc-multiply-v" aria-label="Permalink to &quot;5.38 set_acc_multiply(v)&quot;">​</a></h4><p>Sets the overall acceleration multiplier.</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Single variable type or constant number<br> v: Multiply value <strong>(0 ~ 2) (default: 1)</strong></p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var acc_override = 0.5</span></span>
<span class="line"><span>set_acc_multiply(acc_override)  # Desired-acceleration = 0.5 x original-acceleration</span></span></code></pre></div><h4 id="_5-39-set-speed-acc-j-v-v" tabindex="-1">5.39 set_speed_acc_j(v, v) <a class="header-anchor" href="#_5-39-set-speed-acc-j-v-v" aria-label="Permalink to &quot;5.39 set_speed_acc_j(v, v)&quot;">​</a></h4><p>Sets fixed joint velocity/acceleration for J-series motions (MoveJ, MoveJB, MoveJL).</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Two variable types or constant numbers<br> v: Speed/ Velocity (Unit: 𝒅𝒆𝒈/𝒔)<br> Does not lock the speed for negative input.<br> v: Acceleration (Unit: 𝒅𝒆𝒈/𝒔𝟐)<br> Does not lock the acceleration for negative input.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_speed_acc_j(10, 3)  # Ignoring the speed/acceleration set for each point of Move,</span></span>
<span class="line"><span>                        # set speed as 10 𝑑𝑒𝑔/𝑠, and acceleration as 3 𝑑𝑒𝑔/𝑠2.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>set_speed_acc_j(-1, 5)  # Ignoring the acceleration set for each point of Move,</span></span>
<span class="line"><span>                        # set acceleration as 5𝑑𝑒𝑔/𝑠2.</span></span></code></pre></div><h4 id="_5-40-set-speed-acc-l-v-v" tabindex="-1">5.40 set_speed_acc_l(v, v) <a class="header-anchor" href="#_5-40-set-speed-acc-l-v-v" aria-label="Permalink to &quot;5.40 set_speed_acc_l(v, v)&quot;">​</a></h4><p>Sets fixed linear velocity/acceleration for L-series motions (MoveL, MovePB, MoveLB, MoveITPL).</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Two variable types or constant numbers<br> v: Speed/ Velocity (Unit: 𝒎𝒎/𝒔)<br> Does not lock the speed for negative input.<br> v: Acceleration (Unit: 𝒎𝒎/𝒔𝟐)<br> Does not lock the acceleration for negative input.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_speed_acc_l(15, 5)  # Ignoring the speed/acceleration set for each point of Move,</span></span>
<span class="line"><span>                        # set speed as 15 𝑚𝑚/𝑠, and acceleration as 5 𝑚𝑚/𝑠2.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>set_speed_acc_l(5, -1)  # Ignoring the speed set for each point of Move,</span></span>
<span class="line"><span>                        # set speed as 5𝑚𝑚/𝑠.</span></span></code></pre></div><h4 id="_5-41-set-speed-bar-v" tabindex="-1">5.41 set_speed_bar(v) <a class="header-anchor" href="#_5-41-set-speed-bar-v" aria-label="Permalink to &quot;5.41 set_speed_bar(v)&quot;">​</a></h4><p>Set the overall speed control bar. (bottom speed control bar in UI).</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ul><li> When running a program on the UI Make page, this function does not work if the safety slide bar option is turned on. </li></ul></div><ul><li><p>Input :<br> Single variable type or constant number<br> v: Desired speed control bar position <strong>(0 ~ 1)</strong></p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_speed_bar(0.5)  # Set the speed control bar to 50%.</span></span></code></pre></div><h4 id="_5-42-set-box-dout-v-v" tabindex="-1">5.42 set_box_dout(v, v) <a class="header-anchor" href="#_5-42-set-box-dout-v-v" aria-label="Permalink to &quot;5.42 set_box_dout(v, v)&quot;">​</a></h4><p>Set the digital output of the control box.</p><ul><li><p>Input :<br> Two variable types or constant numbers.<br> v: Port number for the digital-output <strong>(0 ~ 15)</strong><br> v: Output mode selection <strong>(-1 = Bypass, 0 = Low, 1 = High)</strong></p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_box_dout(0, 0)     # Low output from port 0</span></span>
<span class="line"><span>set_box_dout(0, -1)    # Keep low on port 0</span></span>
<span class="line"><span>set_box_dout(0, 1)     # High output from port 0</span></span>
<span class="line"><span>set_box_dout(0, -1)    # Keep high on port 0</span></span></code></pre></div><h4 id="_5-43-set-box-aout-v-v" tabindex="-1">5.43 set_box_aout(v, v) <a class="header-anchor" href="#_5-43-set-box-aout-v-v" aria-label="Permalink to &quot;5.43 set_box_aout(v, v)&quot;">​</a></h4><p>Set the analog output of the control box.</p><ul><li><p>Input :<br> Two variable types or constant numbers<br> v: Port number for the analog output <strong>(0 ~ 3)</strong><br> v: Desired output voltage <strong>(0 ~ 10V)</strong></p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_box_aout(3, 7)  # set 7V for the analog output port 3.</span></span></code></pre></div><h4 id="_5-44-set-box-dout-toggle-v" tabindex="-1">5.44 set_box_dout_toggle(v) <a class="header-anchor" href="#_5-44-set-box-dout-toggle-v" aria-label="Permalink to &quot;5.44 set_box_dout_toggle(v)&quot;">​</a></h4><p>Toggles the current digital output of the control box.</p><ul><li><p>Input :<br> Single variable type or constant number<br> v: Port number for the digital-output <strong>(0 ~ 15)</strong></p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_box_dout (1, 1)         # High output from port 1</span></span>
<span class="line"><span>set_box_dout_toggle (1)     # Toggle the output port 1 ( Low signal will be out)</span></span>
<span class="line"><span>repeat (1 times){           # Port 3 blinks every second</span></span>
<span class="line"><span>    set_box_dout_toggle(3)</span></span>
<span class="line"><span>    wait (1 sec)</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="_5-45-set-serial-tool-v-v-v" tabindex="-1">5.45 set_serial_tool(v, v, v) <a class="header-anchor" href="#_5-45-set-serial-tool-v-v-v" aria-label="Permalink to &quot;5.45 set_serial_tool(v, v, v)&quot;">​</a></h4><p>Set the serial communication (RS232/485) provided by the Tool Flange of the robot arm.</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> If this function is not called in program-flow, the value set in the Setup page is used. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Three variable types or constant numbers.<br> v: Communication speed(Baud rate)<br> v: Stop bit, (0 or 1, <strong>Default 1</strong>)<br> v: Parity bit, (0 : none, 1 : odd, 2 : even, <strong>Default 0</strong>)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_serial_tool(115200, 1, 0)</span></span>
<span class="line"><span># Set tool-flange serial comm. : baud rate = 115200 / stop bit = 1 / parity = none</span></span></code></pre></div><h4 id="_5-46-set-serial-box-v-v-v" tabindex="-1">5.46 set_serial_box(v, v, v) <a class="header-anchor" href="#_5-46-set-serial-box-v-v-v" aria-label="Permalink to &quot;5.46 set_serial_box(v, v, v)&quot;">​</a></h4><p>Set the serial communication (RS232/485) provided by the control box.</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ol><li> The value set in this function returns to the default value after the program ends. </li><li> If this function is not called in program-flow, the value set in the Setup page is used. </li><li> During program flow, the value set in this function is maintained until this function is called again. </li></ol></div><ul><li><p>Input :<br> Three variable types or constant numbers.<br> v: Communication speed(Baud rate)<br> v: Stop bit, (0 or 1, <strong>Default 1</strong>)<br> v: Parity bit, (0 : none, 1 : odd, 2 : even, <strong>Default 0</strong>)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set_serial_box(9600, 1, 0)</span></span>
<span class="line"><span># Set control-box serial comm. : baud rate = 9600 / stop bit = 1 / parity = none</span></span></code></pre></div><h4 id="_5-47-arm-powerdown" tabindex="-1">5.47 arm_powerdown() <a class="header-anchor" href="#_5-47-arm-powerdown" aria-label="Permalink to &quot;5.47 arm_powerdown()&quot;">​</a></h4><p>Turn off the power supply for the robot arm.</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ul><li> The robot arm powers down. Be careful with use. The control box does not turn off. </li></ul></div><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>arm_powerdown()</span></span></code></pre></div><h4 id="_5-48-freedrive-teach-on" tabindex="-1">5.48 freedrive_teach_on() <a class="header-anchor" href="#_5-48-freedrive-teach-on" aria-label="Permalink to &quot;5.48 freedrive_teach_on()&quot;">​</a></h4><p>Turn on direct teaching mode (Free drive mode).</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ul><li> When this function is executed, the control mode of the robot arm is changed. Use with caution. </li></ul></div><h4 id="_5-49-freedrive-teach-off" tabindex="-1">5.49 freedrive_teach_off() <a class="header-anchor" href="#_5-49-freedrive-teach-off" aria-label="Permalink to &quot;5.49 freedrive_teach_off()&quot;">​</a></h4><p>Turn off direct teaching mode (Free drive mode).</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ul><li> When this function is executed, the control mode of the robot arm is changed. Use with caution. </li></ul></div><h4 id="_5-50-db-write-s-v" tabindex="-1">5.50 db_write(s, v) <a class="header-anchor" href="#_5-50-db-write-s-v" aria-label="Permalink to &quot;5.50 db_write(s, v)&quot;">​</a></h4><p>Write variable into the DataBase</p><ul><li><p>Input :<br> s: name of database<br> v: target value for writing.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db_write(“my_data”, 1)</span></span></code></pre></div><h4 id="_5-51-db-write-s-s" tabindex="-1">5.51 db_write(s, s) <a class="header-anchor" href="#_5-51-db-write-s-s" aria-label="Permalink to &quot;5.51 db_write(s, s)&quot;">​</a></h4><p>Write string into the DataBase</p><ul><li><p>Input :<br> s: name of database<br> s: target value for writing.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>db_write(“my_name”, “rainbow”)</span></span></code></pre></div><h4 id="_5-52-v-db-read-s-s-db-read-s" tabindex="-1">5.52 v = db_read(s), s = db_read(s) <a class="header-anchor" href="#_5-52-v-db-read-s-s-db-read-s" aria-label="Permalink to &quot;5.52 v = db_read(s), s = db_read(s)&quot;">​</a></h4><p>Read variable or string data from the DataBase</p><ul><li><p>Input :<br> s: name of database</p></li><li><p>Return :<br> Variable or String</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var saved_value</span></span>
<span class="line"><span>str saved_name</span></span>
<span class="line"><span></span></span>
<span class="line"><span>saved_valued = db_read(“my_data”)</span></span>
<span class="line"><span>saved_name = db_read(“my_name”)</span></span></code></pre></div><h4 id="_5-53-jump-to-v" tabindex="-1">5.53 jump_to(v) <a class="header-anchor" href="#_5-53-jump-to-v" aria-label="Permalink to &quot;5.53 jump_to(v)&quot;">​</a></h4><p>Program execution is not executed until a specific address value.</p><ul><li><p>Input :<br> Single variable type or the constant number.<br> v: Address value (0~99999)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># Jumps through the program flow to the point where jump_here(1234) appears.</span></span>
<span class="line"><span>jump_to(1234)</span></span></code></pre></div><h4 id="_5-54-jump-here-v" tabindex="-1">5.54 jump_here(v) <a class="header-anchor" href="#_5-54-jump-here-v" aria-label="Permalink to &quot;5.54 jump_here(v)&quot;">​</a></h4><p>Execute the program again from this point.</p><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><ul><li> This function should be located at the top line (left) of the program. </li></ul></div><ul><li><p>Input :<br> Single variable type or the constant number.<br> v: Address value (0~99999)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># In the example below, the middle two ‘wait’ lines will be ignored.</span></span>
<span class="line"><span>jump_to(1234)</span></span>
<span class="line"><span>wait (1.0 sec)</span></span>
<span class="line"><span>wait (2.0 sec)</span></span>
<span class="line"><span>jump_here(1234)</span></span></code></pre></div><h4 id="_5-55-jump-to-line-v" tabindex="-1">5.55 jump_to_line(v) <a class="header-anchor" href="#_5-55-jump-to-line-v" aria-label="Permalink to &quot;5.55 jump_to_line(v)&quot;">​</a></h4><p>Jump to a specific line.</p><ul><li><p>Input :<br> Single variable type or the constant number.<br> v: Address value (0~99999)</p><ul><li>The line number is the number of the top line (left) of the program.</li><li>Begin is numbered in line 0, followed by line 1, in that order.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># Go to line number 2.</span></span>
<span class="line"><span>jump_to_line(2)</span></span></code></pre></div><h4 id="_5-56-jump-to-begin" tabindex="-1">5.56 jump_to_begin() <a class="header-anchor" href="#_5-56-jump-to-begin" aria-label="Permalink to &quot;5.56 jump_to_begin()&quot;">​</a></h4><p>Move to the first starting line. Same effect as jump_to_line(0).</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>jump_to_begin()</span></span></code></pre></div><h3 id="_6-system-variables" tabindex="-1">6. SYSTEM VARIABLES <a class="header-anchor" href="#_6-system-variables" aria-label="Permalink to &quot;6. SYSTEM VARIABLES&quot;">​</a></h3><br><h4 id="_6-1-sd-time" tabindex="-1">6.1 SD_TIME <a class="header-anchor" href="#_6-1-sd-time" aria-label="Permalink to &quot;6.1 SD_TIME&quot;">​</a></h4><p>SD_TIME<br> SD_TIMER_0, SD_TIMER_1, …, SD_TIMER_9<br></p><p>A variable representing time.<br> It can be changed to the desired value in the Set function.<br> Used as a timer function.</p><p>Time automatically increments with the flow of program time. <strong>(Unit: Second)</strong></p><h4 id="_6-2-sd-j-ref" tabindex="-1">6.2 SD_J#_REF <a class="header-anchor" href="#_6-2-sd-j-ref" aria-label="Permalink to &quot;6.2 SD_J#\\_REF&quot;">​</a></h4><p>SD_J0_REF<br> SD_J1_REF<br> SD_J2_REF<br> SD_J3_REF<br> SD_J4_REF<br> SD_J5_REF<br></p><p>Joint reference angles. <strong>(Unit: degree)</strong></p><h4 id="_6-3-sd-j-ang" tabindex="-1">6.3 SD_J#_ANG <a class="header-anchor" href="#_6-3-sd-j-ang" aria-label="Permalink to &quot;6.3 SD_J#\\_ANG&quot;">​</a></h4><p>SD_J0_ANG<br> SD_J1_ANG<br> SD_J2_ANG<br> SD_J3_ANG<br> SD_J4_ANG<br> SD_J5_ANG<br></p><p>Joint encoder angles. <strong>(Unit: degree)</strong></p><h4 id="_6-4-sd-j-cur" tabindex="-1">6.4 SD_J#_CUR <a class="header-anchor" href="#_6-4-sd-j-cur" aria-label="Permalink to &quot;6.4 SD_J#\\_CUR&quot;">​</a></h4><p>SD_J0_CUR<br> SD_J1_CUR<br> SD_J2_CUR<br> SD_J3_CUR<br> SD_J4_CUR<br> SD_J5_CUR<br></p><p>Joint phase current. <strong>(Unit: A)</strong></p><h4 id="_6-5-sd-begin-j" tabindex="-1">6.5 SD_BEGIN_J# <a class="header-anchor" href="#_6-5-sd-begin-j" aria-label="Permalink to &quot;6.5 SD_BEGIN_J#&quot;">​</a></h4><p>SD_BEGIN_J0<br> SD_BEGIN_J1<br> SD_BEGIN_J2<br> SD_BEGIN_J3<br> SD_BEGIN_J4<br> SD_BEGIN_J5<br></p><p>Variable representing the joint angles set in Begin. <strong>(Unit: degree)</strong></p><h4 id="_6-6-sd-temperature-mc" tabindex="-1">6.6 SD_TEMPERATURE_MC# <a class="header-anchor" href="#_6-6-sd-temperature-mc" aria-label="Permalink to &quot;6.6 SD_TEMPERATURE_MC#&quot;">​</a></h4><p>SD_TEMPERATURE_MC0<br> SD_TEMPERATURE_MC1<br> SD_TEMPERATURE_MC2<br> SD_TEMPERATURE_MC3<br> SD_TEMPERATURE_MC4<br> SD_TEMPERATURE_MC5<br></p><p>Joint motor controller temperature. <strong>(Unit: celsius)</strong></p><h4 id="_6-7-sd-tcp-x" tabindex="-1">6.7 SD_TCP_X <a class="header-anchor" href="#_6-7-sd-tcp-x" aria-label="Permalink to &quot;6.7 SD_TCP_X&quot;">​</a></h4><p>SD_TCP_X<br> SD_TCP_Y<br> SD_TCP_Z<br> SD_TCP_RX<br> SD_TCP_RY<br> SD_TCP_RZ<br></p><p>TCP values (position and orientation) with respect to the base (global) coordinate.</p><h4 id="_6-8-sd-default-speed" tabindex="-1">6.8 SD_DEFAULT_SPEED <a class="header-anchor" href="#_6-8-sd-default-speed" aria-label="Permalink to &quot;6.8 SD_DEFAULT_SPEED&quot;">​</a></h4><p>Representing the default speed bar. The UI speed control bar value is displayed between 0 and 1.</p><h4 id="_6-9-sd-robot-state" tabindex="-1">6.9 SD_ROBOT_STATE <a class="header-anchor" href="#_6-9-sd-robot-state" aria-label="Permalink to &quot;6.9 SD_ROBOT_STATE&quot;">​</a></h4><p>Indicates whether the robot motion command is being executed.<br></p><ul><li>1 = Idle</li><li>3 = Moving</li></ul><h4 id="_6-10-sd-power-state" tabindex="-1">6.10 SD_POWER_STATE <a class="header-anchor" href="#_6-10-sd-power-state" aria-label="Permalink to &quot;6.10 SD_POWER_STATE&quot;">​</a></h4><p>Power information of the control box.</p><ul><li>SD_POWER_STATE &gt;&gt; 0 &amp; 0x01 : 48V SMPS State</li><li>SD_POWER_STATE &gt;&gt; 1 &amp; 0x01 : Power switching information</li><li>SD_POWER_STATE &gt;&gt; 2 &amp; 0x01 : 24V SMPS State</li><li>SD_POWER_STATE &gt;&gt; 3 &amp; 0x01 : 48V switching information</li><li>SD_POWER_STATE &gt;&gt; 4 &amp; 0x01 : User (PC) power selection information</li><li>SD_POWER_STATE &gt;&gt; 5 &amp; 0x01 : Estop switch state</li></ul><h4 id="_6-11-sd-collision-detect-state" tabindex="-1">6.11 SD_COLLISION_DETECT_STATE <a class="header-anchor" href="#_6-11-sd-collision-detect-state" aria-label="Permalink to &quot;6.11 SD_COLLISION_DETECT_STATE&quot;">​</a></h4><p>Whether the external collision detection function is on/off</p><ul><li>0 = Collision detection mode off</li><li>1 = Collision detection mode on</li></ul><h4 id="_6-12-sd-is-free-drive-mode" tabindex="-1">6.12 SD_IS_FREE_DRIVE_MODE <a class="header-anchor" href="#_6-12-sd-is-free-drive-mode" aria-label="Permalink to &quot;6.12 SD_IS_FREE_DRIVE_MODE&quot;">​</a></h4><p>Whether to use direct teaching</p><ul><li>0 = Free-drive (Direct teaching) off</li><li>1 = Free-drive (Direct teaching) on</li></ul><h4 id="_6-13-sd-pg-mode" tabindex="-1">6.13 SD_PG_MODE <a class="header-anchor" href="#_6-13-sd-pg-mode" aria-label="Permalink to &quot;6.13 SD_PG_MODE&quot;">​</a></h4><p>Indicates the robot&#39;s operation mode.</p><ul><li>0 = Real mode</li><li>1 = Simulation mode</li></ul><h4 id="_6-14-sd-init-state-info" tabindex="-1">6.14 SD_INIT_STATE_INFO <a class="header-anchor" href="#_6-14-sd-init-state-info" aria-label="Permalink to &quot;6.14 SD_INIT_STATE_INFO&quot;">​</a></h4><p>This is a system variable representing the activation phase information of the robot.</p><h4 id="_6-15-sd-init-err" tabindex="-1">6.15 SD_INIT_ERR <a class="header-anchor" href="#_6-15-sd-init-err" aria-label="Permalink to &quot;6.15 SD_INIT_ERR&quot;">​</a></h4><p>This is a system variable that indicates the robot activation error information.</p><h4 id="_6-16-sd-tfb-analog-in" tabindex="-1">6.16 SD_TFB_ANALOG_IN_# <a class="header-anchor" href="#_6-16-sd-tfb-analog-in" aria-label="Permalink to &quot;6.16 SD_TFB_ANALOG_IN\\_\\#&quot;">​</a></h4><p>SD_TFB_ANALOG_IN_0<br> SD_TFB_ANALOG_IN_1</p><p>Variable with analog value (0~10V) of two analog input ports of tool flange board (TFB).</p><h4 id="_6-17-sd-tfb-digital-in" tabindex="-1">6.17 SD_TFB_DIGITAL_IN_# <a class="header-anchor" href="#_6-17-sd-tfb-digital-in" aria-label="Permalink to &quot;6.17 SD_TFB_DIGITAL_IN\\_\\#&quot;">​</a></h4><p>SD_TFB_DIGITAL_IN_0<br> SD_TFB_DIGITAL_IN_1</p><p>A variable with a digital value (0 or 1) of the two digital input ports on the tool flange board (TFB).</p><h4 id="_6-18-sd-tfb-digital-out" tabindex="-1">6.18 SD_TFB_DIGITAL_OUT_# <a class="header-anchor" href="#_6-18-sd-tfb-digital-out" aria-label="Permalink to &quot;6.18 SD_TFB_DIGITAL_OUT\\_\\#&quot;">​</a></h4><p>SD_TFB_DIGITAL_OUT_0<br> SD_TFB_DIGITAL_OUT_1</p><p>A variable with an output value (0 or 1) of the two digital output ports of the tool flange board (TFB).</p><h4 id="_6-19-sd-tfb-voltage-out" tabindex="-1">6.19 SD_TFB_VOLTAGE_OUT <a class="header-anchor" href="#_6-19-sd-tfb-voltage-out" aria-label="Permalink to &quot;6.19 SD_TFB_VOLTAGE_OUT&quot;">​</a></h4><p>It is a variable indicating the voltage output information (0 or 12 or 24V) of the tool flange board (TFB).</p><h4 id="_6-20-sd-op-stat-collision-occur" tabindex="-1">6.20 SD_OP_STAT_COLLISION_OCCUR <a class="header-anchor" href="#_6-20-sd-op-stat-collision-occur" aria-label="Permalink to &quot;6.20 SD_OP_STAT_COLLISION_OCCUR&quot;">​</a></h4><p>A variable indicating whether an external collision detected.</p><ul><li>0 = Idle</li><li>1 = External collision detected</li></ul><h4 id="_6-21-sd-op-stat-sos-flag" tabindex="-1">6.21 SD_OP_STAT_SOS_FLAG <a class="header-anchor" href="#_6-21-sd-op-stat-sos-flag" aria-label="Permalink to &quot;6.21 SD_OP_STAT_SOS_FLAG&quot;">​</a></h4><p>A variable indicating if a control box power problem / robot joint controller / other problem has occurred.</p><ul><li>0 = Idle</li></ul><h4 id="_6-22-sd-op-stat-self-collision" tabindex="-1">6.22 SD_OP_STAT_SELF_COLLISION <a class="header-anchor" href="#_6-22-sd-op-stat-self-collision" aria-label="Permalink to &quot;6.22 SD_OP_STAT_SELF_COLLISION&quot;">​</a></h4><p>A variable indicating just before self-collision during robot motion.</p><ul><li>0 = Idle</li><li>1 = Entering self-collision range</li></ul><h4 id="_6-23-sd-op-stat-estop-occur" tabindex="-1">6.23 SD_OP_STAT_ESTOP_OCCUR <a class="header-anchor" href="#_6-23-sd-op-stat-estop-occur" aria-label="Permalink to &quot;6.23 SD_OP_STAT_ESTOP_OCCUR&quot;">​</a></h4><p>This is a variable indicating whether the program/robot is in the paused state.</p><ul><li>0 = Idle</li><li>1 = Pause state</li></ul><h4 id="_6-24-sd-op-stat-ems-flag" tabindex="-1">6.24 SD_OP_STAT_EMS_FLAG <a class="header-anchor" href="#_6-24-sd-op-stat-ems-flag" aria-label="Permalink to &quot;6.24 SD_OP_STAT_EMS_FLAG&quot;">​</a></h4><p>This variable tells the user whether or not a singularity (= there is no solution for the robot control algorithm) is present.</p><ul><li>0 = Idle</li></ul><h4 id="_6-25-sd-digital-in-config" tabindex="-1">6.25 SD_DIGITAL_IN_CONFIG_# <a class="header-anchor" href="#_6-25-sd-digital-in-config" aria-label="Permalink to &quot;6.25 SD_DIGITAL_IN_CONFIG\\_\\#&quot;">​</a></h4><p>SD_DIGITAL_IN_CONFIG_0<br> SD_DIGITAL_IN_CONFIG_1</p><p>Shows the information of the two protective stop terminals. (Din 16/17)</p><h4 id="_6-26-sd-inbox-trap-flag" tabindex="-1">6.26 SD_INBOX_TRAP_FLAG_# <a class="header-anchor" href="#_6-26-sd-inbox-trap-flag" aria-label="Permalink to &quot;6.26 SD_INBOX_TRAP_FLAG\\_\\#&quot;">​</a></h4><p>SD_INBOX_TRAP_FLAG_0<br> SD_INBOX_TRAP_FLAG_1</p><p>This is a variable that checks whether a specific part of the robot has entered a specific area (Inbox).</p><h4 id="_6-27-sd-inbox-check-mode" tabindex="-1">6.27 SD_INBOX_CHECK_MODE_# <a class="header-anchor" href="#_6-27-sd-inbox-check-mode" aria-label="Permalink to &quot;6.27 SD_INBOX_CHECK_MODE\\_\\#&quot;">​</a></h4><p>SD_INBOX_CHECK_MODE_0<br> SD_INBOX_CHECK_MODE_1</p><p>Inbox Check mode.</p><ul><li>0: No checking</li><li>1: Check Tool Flange Center (check whether the TFC is in the Inbox area)</li><li>2: Check Tool Center Point (check whether the TCP is in the Inbox area)</li><li>3: Check Tool Box (Check whether the virtual box set at the end of the robot arm has entered in Inbox area.)</li><li>4: Check All (1,2,3)</li></ul><h4 id="_6-28-sd-sock-is-open" tabindex="-1">6.28 SD_SOCK_IS_OPEN_# <a class="header-anchor" href="#_6-28-sd-sock-is-open" aria-label="Permalink to &quot;6.28 SD_SOCK_IS_OPEN\\_\\#&quot;">​</a></h4><p>SD_SOCK_IS_OPEN_0<br> SD_SOCK_IS_OPEN_1<br> SD_SOCK_IS_OPEN_2<br> SD_SOCK_IS_OPEN_3<br> SD_SOCK_IS_OPEN_4<br></p><p>This is a variable indicating whether the socket of the corresponding number was normally opened and whether it was normally connected to the server.<br> 1 (true) if creation and connection were performed normally. <strong>(# : 0 ~ 4)</strong></p><h4 id="_6-29-sd-sock-last-read" tabindex="-1">6.29 SD_SOCK_LAST_READ_# <a class="header-anchor" href="#_6-29-sd-sock-last-read" aria-label="Permalink to &quot;6.29 SD_SOCK_LAST_READ\\_\\#&quot;">​</a></h4><p>SD_SOCK_LAST_READ_0<br> SD_SOCK_LAST_READ_1<br> SD_SOCK_LAST_READ_2<br> SD_SOCK_LAST_READ_3<br> SD_SOCK_LAST_READ_4<br></p><p>A variable indicating whether the read function was performed normally with the socket of the corresponding number.<br> 1 (true) if the read was performed normally. <strong>(# : 0 ~ 4)</strong></p><h4 id="_6-30-sd-hand-toktok" tabindex="-1">6.30 SD_HAND_TOKTOK <a class="header-anchor" href="#_6-30-sd-hand-toktok" aria-label="Permalink to &quot;6.30 SD_HAND_TOKTOK&quot;">​</a></h4><p>This is a variable indicating whether or not an act of tapping (tok tok) from outside the robot has occurred.</p><h4 id="_6-31-sd-finish-at-event" tabindex="-1">6.31 SD_FINISH_AT_EVENT <a class="header-anchor" href="#_6-31-sd-finish-at-event" aria-label="Permalink to &quot;6.31 SD_FINISH_AT_EVENT&quot;">​</a></h4><p>Stores whether the motion has ended in a way that the robot&#39;s FinishAt (motion escape) condition.<br></p><p>If the motion is finished by reaching the motion target point, this variable is 0.<br> If the FinishAt condition is satisfied and the operation is finished, this variable becomes 1.</p><h4 id="_6-32-sd-tcp-vel-ref" tabindex="-1">6.32 SD_TCP_VEL_REF <a class="header-anchor" href="#_6-32-sd-tcp-vel-ref" aria-label="Permalink to &quot;6.32 SD_TCP_VEL_REF&quot;">​</a></h4><p>TCP reference velocity.</p><h4 id="_6-33-sd-motion-time" tabindex="-1">6.33 SD_MOTION_TIME <a class="header-anchor" href="#_6-33-sd-motion-time" aria-label="Permalink to &quot;6.33 SD_MOTION_TIME&quot;">​</a></h4><p>It is a variable that stores the time of unit movement. When the next movement is executed, it starts from 0 again.</p><h4 id="_6-34-sd-arm-power" tabindex="-1">6.34 SD_ARM_POWER <a class="header-anchor" href="#_6-34-sd-arm-power" aria-label="Permalink to &quot;6.34 SD_ARM_POWER&quot;">​</a></h4><p>A variable representing the power the robot is using.</p><h4 id="_6-35-sd-is-tpu-connect" tabindex="-1">6.35 SD_IS_TPU_CONNECT <a class="header-anchor" href="#_6-35-sd-is-tpu-connect" aria-label="Permalink to &quot;6.35 SD_IS_TPU_CONNECT&quot;">​</a></h4><p>This is a variable that indicates whether the TPU (Teaching Pendant Unit, Tablet PC) is connected.</p><h4 id="_6-36-sd-is-run-in-make" tabindex="-1">6.36 SD_IS_RUN_IN_MAKE <a class="header-anchor" href="#_6-36-sd-is-run-in-make" aria-label="Permalink to &quot;6.36 SD_IS_RUN_IN_MAKE&quot;">​</a></h4><p>1 is saved if the current program operation is executed in the Make page.</p><h4 id="_6-37-sd-is-run-in-play" tabindex="-1">6.37 SD_IS_RUN_IN_PLAY <a class="header-anchor" href="#_6-37-sd-is-run-in-play" aria-label="Permalink to &quot;6.37 SD_IS_RUN_IN_PLAY&quot;">​</a></h4><p>1 is saved if the current program operation is executed in the Play page.</p><h4 id="_6-38-sd-is-intended-stop" tabindex="-1">6.38 SD_IS_INTENDED_STOP <a class="header-anchor" href="#_6-38-sd-is-intended-stop" aria-label="Permalink to &quot;6.38 SD_IS_INTENDED_STOP&quot;">​</a></h4><p>Indicates whether the program termination is an intentional termination or an emergency termination.</p><h4 id="_6-39-sd-move-index" tabindex="-1">6.39 SD_MOVE_INDEX <a class="header-anchor" href="#_6-39-sd-move-index" aria-label="Permalink to &quot;6.39 SD_MOVE_INDEX&quot;">​</a></h4><p>In a continuous motion such as MovePB / ITPL, it tells which point the robot is passing through.</p><h3 id="_7-movement-functions" tabindex="-1">7. MOVEMENT FUNCTIONS <a class="header-anchor" href="#_7-movement-functions" aria-label="Permalink to &quot;7. MOVEMENT FUNCTIONS&quot;">​</a></h3><p><img src="`+i+`" alt="missing"></p><p>Pre-Defined Motion Primitives</p><ul><li>Move J</li><li>Move L</li><li>Move JB</li><li>Move JB2</li><li>Move LB</li><li>Move PB</li><li>Move ITPL</li><li>Move PRO</li><li>Move XB</li><li>Move Circle</li></ul><p>User-Generate-RT Motion</p><ul><li>Servo J</li><li>Servo L</li><li>Servo T</li><li>Speed J</li><li>Speed L</li></ul><h4 id="_7-1-move-finish-wait" tabindex="-1">7.1 move_finish_wait() <a class="header-anchor" href="#_7-1-move-finish-wait" aria-label="Permalink to &quot;7.1 move_finish_wait()&quot;">​</a></h4><p>A function that waits for the currently executing movement to complete.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># Wait for the movement to complete until my_destination.</span></span>
<span class="line"><span>point my_destination = {100,200,300,0,0,0}</span></span>
<span class="line"><span>move_l(my_destination, 20, 5, 0)</span></span>
<span class="line"><span>move_finish_wait()</span></span></code></pre></div><h4 id="_7-2-move-l-p-v-v-v-1" tabindex="-1">7.2 move_l(P, v, v, v=1) <a class="header-anchor" href="#_7-2-move-l-p-v-v-v-1" aria-label="Permalink to &quot;7.2 move_l(P, v, v, v=1)&quot;">​</a></h4><p>A function that makes TCP to move in a straight line to the target point.</p><ul><li><p>Input :<br> P: Target TCP posture<br> v: Speed (𝒎𝒎/𝒔)<br> v: Acceleration (𝒎𝒎/𝒔𝟐)<br> v: Wait flag (default: 1)</p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,300,0,0,0}</span></span>
<span class="line"><span>point my_point2= {100,150,100,0,90,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_l(my_point1, 20, 5)    # MoveL method to move to my_point1.</span></span>
<span class="line"><span>move_l(my_point2, 20, 5)    # MoveL method to move to my_point2.</span></span></code></pre></div><h4 id="_7-3-move-l-rel-p-v-v-v-v-1" tabindex="-1">7.3 move_l_rel(P, v, v, v, v=1) <a class="header-anchor" href="#_7-3-move-l-rel-p-v-v-v-v-1" aria-label="Permalink to &quot;7.3 move_l_rel(P, v, v, v, v=1)&quot;">​</a></h4><p>A function that makes TCP to move in a straight line to the target point.<br> Enter the target point as a value relative to the current TCP value.</p><ul><li><p>Input :<br> P: Relative position &amp; orientation value.<br> v: Speed (𝒎𝒎/𝒔)<br> v: Acceleration (𝒎𝒎/𝒔𝟐)<br> v: reference frame for the relative P value.</p><ul><li><p>0: Base (Global) coordinate.</p></li><li><p>1: Tool (Local) coordinate.</p></li><li><p>2: User coordinate 0</p></li><li><p>3: User coordinate 1</p></li><li><p>4: User coordinate 2</p><p>v: Wait flag (default: 1)</p></li><li><p>0 = No Wait (Non-Block).</p></li><li><p>1 = Wait for the movement to complete (Block).</p></li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># move TCP (0,100,-200) w.r.t. Base coordinate (speed/acceleration = 300 / 400)</span></span>
<span class="line"><span>move_l_rel(pnt[0,100,-200,0,0,0], 300, 400, 0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># move TCP 50 mm w.r.t. x axis of User coordinate 2 (speed/acceleration = 100 / 300)</span></span>
<span class="line"><span>move_l_rel(pnt[50,0,0,0,0,0], 100, 300, 4)</span></span></code></pre></div><h4 id="_7-4-move-j-j-v-v-v-1" tabindex="-1">7.4 move_j(J, v, v, v=1) <a class="header-anchor" href="#_7-4-move-j-j-v-v-v-1" aria-label="Permalink to &quot;7.4 move_j(J, v, v, v=1)&quot;">​</a></h4><p>Move the robot arm to the target joint angle.</p><ul><li><p>Input :<br> J: Target joint angles<br> v: Speed (Unit: 𝒅𝒆𝒈/𝒔)<br> v: Acceleration (Unit: 𝒅𝒆𝒈/𝒔𝟐)<br> v: Wait flag (default: 1)</p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>move_j (jnt[0,0,90,0,90,0], 60, 80)   # move joint angles to (0,0,90,0,90,0) degree with speed/acceleration = 60/80.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jnt my_joint_angle = {0,0,90,0,90,0}</span></span>
<span class="line"><span>move_j (my_joint_angle, 60, 80)       # move joint angles to (0,0,90,0,90,0) degree with speed/acceleration = 60/80.</span></span></code></pre></div><h4 id="_7-5-move-j-rel-j-v-v-v-1" tabindex="-1">7.5 move_j_rel(J, v, v, v=1) <a class="header-anchor" href="#_7-5-move-j-rel-j-v-v-v-1" aria-label="Permalink to &quot;7.5 move_j_rel(J, v, v, v=1)&quot;">​</a></h4><p>Relatively move joints from its current posture.</p><ul><li><p>Input :<br> J: Delta Target joint angles<br> v: Speed (Unit: 𝒅𝒆𝒈/𝒔)<br> v: Acceleration (Unit: 𝒅𝒆𝒈/𝒔𝟐)<br> v: Wait flag (default: 1)</p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># move joints (0,0,90,0,90,0) degree with speed/acceleration = 60/80. w.r.t. current posture</span></span>
<span class="line"><span>move_j_rel (jnt[0,0,90,0,90,0], 60, 80)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># move joints (0,0,90,0,90,0) degree with speed/acceleration = 60/80. w.r.t. current posture</span></span>
<span class="line"><span>jnt del_joint_angle = {0,0,90,0,90,0}</span></span>
<span class="line"><span>move_j_rel (del_joint_angle, 60, 80)</span></span></code></pre></div><h4 id="_7-6-move-jl-p-v-v-v-1" tabindex="-1">7.6 move_jl(P, v, v, v=1) <a class="header-anchor" href="#_7-6-move-jl-p-v-v-v-1" aria-label="Permalink to &quot;7.6 move_jl(P, v, v, v=1)&quot;">​</a></h4><p>(move joint with linear input)<br> This function moves to the target point using the move_j method rather than a straight line.</p><ul><li><p>Input :<br> P: Target TCP posture<br> v: Speed (Unit: 𝒅𝒆𝒈/𝒔)<br> v: Acceleration (Unit: 𝒅𝒆𝒈/𝒔𝟐)<br> v: Wait flag (default: 1)</p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,300,0,0,0}</span></span>
<span class="line"><span>point my_point2 = {100,150,100,0,90,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_jl(my_point1, 20, 5)   # Move TCP to ‘my_point1’ via MoveJ method.</span></span>
<span class="line"><span>move_jl(my_point2, 20, 5)   # Move TCP to ‘my_point2’ via MoveJ method.</span></span></code></pre></div><h4 id="_7-7-move-pb-clear" tabindex="-1">7.7 move_pb_clear() <a class="header-anchor" href="#_7-7-move-pb-clear" aria-label="Permalink to &quot;7.7 move_pb_clear()&quot;">​</a></h4><p>Initialize (Clear) the point list to be used in MovePB.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>move_pb_clear()   # Initialize (Clear) the point list to be used in MovePB.</span></span></code></pre></div><h4 id="_7-8-move-pb-add-p-v-v-v" tabindex="-1">7.8 move_pb_add(P, v, v, v) <a class="header-anchor" href="#_7-8-move-pb-add-p-v-v-v" aria-label="Permalink to &quot;7.8 move_pb_add(P, v, v, v)&quot;">​</a></h4><p>This function adds the points used in MovePB to the list.</p><ul><li><p>Input :<br> P: Target TCP posture<br> v: Speed (Unit: 𝒎𝒎/𝒔)<br> v: Blending option</p><ul><li>0 = Blend based on Ratio.</li><li>1 = Blend based on Distance.</li></ul><p>v: Blending value (0 ~ 1 / distance (mm))</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,0,0,0,0}</span></span>
<span class="line"><span>point my_point2 = {150,0,50,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add ‘my_point1’ to the MovePB list with speed=50mm + 50% blending option</span></span>
<span class="line"><span>move_pb_add(my_point1, 50, 0, 0.5)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add ‘my_point2’ to the MovePB list with speed=100mm + 50mm blending option</span></span>
<span class="line"><span>move_pb_add(my_point2, 100, 1, 50)</span></span></code></pre></div><h4 id="_7-9-move-pb-run-v-v-v-1" tabindex="-1">7.9 move_pb_run(v, v, v=1) <a class="header-anchor" href="#_7-9-move-pb-run-v-v-v-1" aria-label="Permalink to &quot;7.9 move_pb_run(v, v, v=1)&quot;">​</a></h4><p>This function executes MovePB using the points added in move_pb_add.</p><ul><li><p>Input :<br> v: Acceleration (Unit: 𝒎𝒎/𝒔𝟐 )<br> v: Orientation option</p><ul><li>0 = Intended (Follows the rotation value taught by the user)</li><li>1 = Constant (Keep the rotation value of the starting position)</li></ul><p>v: Wait flag <strong>(default: 1)</strong></p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,0,0,0,0}</span></span>
<span class="line"><span>point my_point2 = {150,0,50,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_pb_clear()                     # Clear the MovePB list.</span></span>
<span class="line"><span>move_pb_add(my_point1, 50, 0, 0.5)  # add the desired point to the list (my_point1)</span></span>
<span class="line"><span>move_pb_add(my_point2, 100, 1, 50)  # add the desired point to the list (my_point2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_pb_run(200, 1)                 # Move to my_point2 using the previously set blending options.</span></span>
<span class="line"><span>                                    # At this time, the rotation value maintains the same value as the starting position.</span></span></code></pre></div><h4 id="_7-10-move-itpl-clear" tabindex="-1">7.10 move_itpl_clear() <a class="header-anchor" href="#_7-10-move-itpl-clear" aria-label="Permalink to &quot;7.10 move_itpl_clear()&quot;">​</a></h4><p>Initialize (Clear) the point list to be used in MoveITPL.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>move_itpl_clear()   # Initialize (Clear) the point list to be used in MoveITPL.</span></span></code></pre></div><h4 id="_7-11-move-itpl-add-p-v" tabindex="-1">7.11 move_itpl_add(P, v) <a class="header-anchor" href="#_7-11-move-itpl-add-p-v" aria-label="Permalink to &quot;7.11 move_itpl_add(P, v)&quot;">​</a></h4><p>This function adds the points used in MoveITPL to the list.</p><ul><li><p>Input :<br> P: Target TCP posture.<br> v: Speed (Unit: 𝒎𝒎/𝒔)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,0,0,0,0}</span></span>
<span class="line"><span>point my_point2 = {150,0,50,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add ‘my_point1’ to the MoveITPL list with speed=50mm</span></span>
<span class="line"><span>move_itpl_add(my_point1, 50)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add ‘my_point2’ to the MoveITPL list with speed=100mm</span></span>
<span class="line"><span>move_itpl_add(my_point2, 100)</span></span></code></pre></div><h4 id="_7-12-move-itpl-run-v-v-v-1" tabindex="-1">7.12 move_itpl_run(v, v, v=1) <a class="header-anchor" href="#_7-12-move-itpl-run-v-v-v-1" aria-label="Permalink to &quot;7.12 move_itpl_run(v, v, v=1)&quot;">​</a></h4><p>This function executes MoveITPL using the points added in move_itpl_add.</p><ul><li><p>Input :<br> v: Acceleration<br> v: Orientation/motion option</p><ul><li>0 = Intended (Follows the rotation value taught by the user)</li><li>1 = Constant (Keep the rotation value of the starting position)</li><li>2 = Reserved (N/A)</li><li>3 = Smooth (Similar to Intended, but with a smooth rate of rotation change)</li><li>4 = Reserved (N/A)</li><li>5 = CA-Intended (CA mode Intended)</li><li>6 = CA-Constant (CA mode Constant)</li><li>7 = Reserved (N/A)</li><li>8 = CA-Smooth (CA mode Smooth)<br> CA: Combined Arc mode</li></ul><p>v: Wait flag <strong>(default: 1)</strong></p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,0,0,0,0}</span></span>
<span class="line"><span>point my_point2 = {150,0,50,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_itpl_clear()               # Clear the MoveITPL list</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_itpl_add(my_point1, 50)    # add ‘my_point1’ to the MoveITPL list with speed = 50mm/s</span></span>
<span class="line"><span>move_itpl_add(my_point2, 100)   # add ‘my_point2’ to the MoveITPL list with speed = 100mm/s</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_itpl_run(200, 1)           # Move to ‘my_point2’ with move_itpl type movement.</span></span>
<span class="line"><span>                                # In this case, the rotation value taught by the user is used.</span></span></code></pre></div><h4 id="_7-13-move-pro-clear" tabindex="-1">7.13 move_pro_clear() <a class="header-anchor" href="#_7-13-move-pro-clear" aria-label="Permalink to &quot;7.13 move_pro_clear()&quot;">​</a></h4><p>Initialize (Clear) the point list to be used in MovePRO.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># Initialize (Clear) the point list to be used in MovePRO.</span></span>
<span class="line"><span>move_pro_clear()</span></span></code></pre></div><h4 id="_7-14-move-pro-add-p-v-v-v" tabindex="-1">7.14 move_pro_add(P, v, v, v) <a class="header-anchor" href="#_7-14-move-pro-add-p-v-v-v" aria-label="Permalink to &quot;7.14 move_pro_add(P, v, v, v)&quot;">​</a></h4><p>This function adds the points used in MovePRO to the list.</p><ul><li><p>Input :<br> P: Target TCP posture<br> v: Speed (Unit: 𝒎𝒎/𝒔)<br> v: Point Type</p><ul><li>0 = Linear</li><li>1 = Corner (Circle)</li><li>2 = Blend(dist)</li><li>3 = Blend (%)</li></ul><p>v: Blending value (used for type 2 and 3)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,0,0,0,0}</span></span>
<span class="line"><span>point my_point2 = {150,0,50,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add ‘my_point1’ to the MovePRO list with speed=50mm as Linear-Waypoint</span></span>
<span class="line"><span>move_pro_add(my_point1, 50, 0, 0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add ‘my_point2’ to the MovePB list with speed=100mm as Circular(Corner)-Waypoint</span></span>
<span class="line"><span>move_pro_add(my_point2, 100, 1, 0)</span></span></code></pre></div><h4 id="_7-15-move-pro-run-v-v-v-1" tabindex="-1">7.15 move_pro_run(v, v, v=1) <a class="header-anchor" href="#_7-15-move-pro-run-v-v-v-1" aria-label="Permalink to &quot;7.15 move_pro_run(v, v, v=1)&quot;">​</a></h4><p>This function executes MovePRO using the points added in move_pro_add.</p><ul><li><p>Input :<br> v: Acceleration (Unit: 𝒎𝒎/𝒔𝟐 )<br> v: Orientation option</p><ul><li>0 = Intended (Follows the rotation value taught by the user)</li><li>1 = Constant (Keep the rotation value of the starting position)</li></ul><p>v: Wait flag (default: 1)</p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,0,0,0,0}</span></span>
<span class="line"><span>point my_point2 = {150,0,50,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Clear the MovePRO list.</span></span>
<span class="line"><span>move_pro_clear()</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add the desired point to the list (my_point1) - Linear</span></span>
<span class="line"><span>move_pro_add(my_point1, 50, 0, 0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add the desired point to the list (my_point2) - Circular (Corner)</span></span>
<span class="line"><span>move_pro_add(my_point2, 100, 1, 0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add the desired point to the list - Linear</span></span>
<span class="line"><span>move_pro_add(pnt[150, 0, 400,0,0,0], 100, 0, 0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_pro_run(200, 0)</span></span></code></pre></div><h4 id="_7-16-move-xb-clear" tabindex="-1">7.16 move_xb_clear() <a class="header-anchor" href="#_7-16-move-xb-clear" aria-label="Permalink to &quot;7.16 move_xb_clear()&quot;">​</a></h4><p>Initialize (Clear) the point list to be used in MoveXB (Blend L and J).</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># Initialize (Clear) the point list to be used in MoveXB.</span></span>
<span class="line"><span>move_xb_clear()</span></span></code></pre></div><h4 id="_7-17-move-xb-add-p-v-v-v-v" tabindex="-1">7.17 move_xb_add(P, v, v, v, v) <a class="header-anchor" href="#_7-17-move-xb-add-p-v-v-v-v" aria-label="Permalink to &quot;7.17 move_xb_add(P, v, v, v, v)&quot;">​</a></h4><p>This function adds the points used in MoveXB to the list. (L-Type Movement)</p><ul><li><p>Input :<br> P: Target TCP posture<br> v: Speed (Unit: 𝒎𝒎/𝒔)<br> v: Acceleration (Unit: 𝒎𝒎/𝒔𝟐)<br> v: Blend Type (0 = Blend in %, 1 = Blend in mm)<br> v: Blending value (based on Blend Type % or mm)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>move_xb_add(pnt[100,200,300,90,0,90], 100, 400, 0, 100)</span></span></code></pre></div><h4 id="_7-18-move-xb-add-j-v-v-v-v" tabindex="-1">7.18 move_xb_add(J, v, v, v, v) <a class="header-anchor" href="#_7-18-move-xb-add-j-v-v-v-v" aria-label="Permalink to &quot;7.18 move_xb_add(J, v, v, v, v)&quot;">​</a></h4><p>This function adds the points used in MoveXB to the list. (J-Type Movement)</p><ul><li><p>Input :<br> J: Target Joint posture<br> v: Speed (Unit: %)<br> v: Acceleration (Unit: %)<br> v: Blend Type (0 = Blend in %, 1 = Blend in mm)<br> v: Blending value (based on Blend Type % or mm)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>move_xb_add(jnt[0,0, 90,0,90,0], 50, 40, 0, 100)</span></span></code></pre></div><h4 id="_7-19-move-xb-run-v-v-1" tabindex="-1">7.19 move_xb_run(v, v=1) <a class="header-anchor" href="#_7-19-move-xb-run-v-v-1" aria-label="Permalink to &quot;7.19 move_xb_run(v, v=1)&quot;">​</a></h4><p>This function executes MoveXB using the points added in move_xb_add.</p><ul><li><p>Input :<br> v: Trajectory Blending Option</p><ul><li>0 = Speed blending</li><li>1 = Position blending</li></ul><p>v: Wait flag (default: 1)</p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>move_xb_clear()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_xb_add(pnt[100,200,300,90,0,90], 100, 400, 0, 100)</span></span>
<span class="line"><span>move_xb_add(jnt[0,0, 90,0,90,0], 50, 40, 0, 100)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_xb_run(0, 0)</span></span></code></pre></div><h4 id="_7-20-move-lc-clear" tabindex="-1">7.20 move_lc_clear() <a class="header-anchor" href="#_7-20-move-lc-clear" aria-label="Permalink to &quot;7.20 move_lc_clear()&quot;">​</a></h4><p>Initialize (Clear) the point list to be used in MoveLC.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>move_lc_clear()   # Initialize (Clear) the point list to be used in MoveLC.</span></span></code></pre></div><h4 id="_7-21-move-lc-add-p-v-v" tabindex="-1">7.21 move_lc_add(P, v, v) <a class="header-anchor" href="#_7-21-move-lc-add-p-v-v" aria-label="Permalink to &quot;7.21 move_lc_add(P, v, v)&quot;">​</a></h4><p>This function adds the points used in MoveLC to the list.</p><ul><li><p>Input :<br> P: Target TCP posture.<br> v: Speed (Unit: 𝒎𝒎/𝒔)<br> v: Property (0 or 1)</p><ul><li>0 = Pass through linear motion</li><li>1 = Pass through circular motion</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,0,0,0,0}</span></span>
<span class="line"><span>point my_point2 = {150,0,50,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_lc_add(my_point1, 50, 1)   # add ‘my_point1’ to the MoveLC list with velocity 50mm/s.</span></span>
<span class="line"><span>move_lc_add(my_point2, 100, 0)  # add ‘my_point2’ to the MoveLC list with velocity 100mm/s.</span></span></code></pre></div><h4 id="_7-22-move-lc-run-v-v-v-1" tabindex="-1">7.22 move_lc_run(v, v, v=1) <a class="header-anchor" href="#_7-22-move-lc-run-v-v-v-1" aria-label="Permalink to &quot;7.22 move_lc_run(v, v, v=1)&quot;">​</a></h4><p>This function executes MoveLC using the points added in move_lc_add.</p><ul><li><p>Input :<br> v: Acceleration<br> v: Orientation options</p><ul><li>0 = Intended (Follows the rotation value taught by the user)</li><li>1 = Constant (Keep the rotation value of the starting position)</li><li>2 = Reserved (N/A)</li><li>3 = Smooth (Similar to Intended, but with a smooth rate of rotation change)</li><li>4 = Reserved (N/A)</li></ul><p>v: Wait flag <strong>(default: 1)</strong></p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,0,0,0,0}</span></span>
<span class="line"><span>point my_point2 = {150,0,50,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_lc_clear()  # clear the MoveLC list</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_lc_add(my_point1, 50, 1)   # add ‘my_point1’ to the list</span></span>
<span class="line"><span>move_lc_add(my_point2, 100, 0)  # add ‘my_point2’ to the list</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_lc_run(200, 1)   # Use the linear &amp; circular motion to move up to my_point2.</span></span>
<span class="line"><span>                      # In this case, the rotation value taught by the user is used for the rotation value.</span></span></code></pre></div><h4 id="_7-23-move-lb-clear" tabindex="-1">7.23 move_lb_clear() <a class="header-anchor" href="#_7-23-move-lb-clear" aria-label="Permalink to &quot;7.23 move_lb_clear()&quot;">​</a></h4><p>Initialize (Clear) the point list to be used in MoveLB.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>move_lb_clear()   # Initialize (Clear) the point list to be used in MoveLB.</span></span></code></pre></div><h4 id="_7-24-move-lb-add-p-v" tabindex="-1">7.24 move_lb_add(P, v) <a class="header-anchor" href="#_7-24-move-lb-add-p-v" aria-label="Permalink to &quot;7.24 move_lb_add(P, v)&quot;">​</a></h4><p>This function adds the points used in MoveLB to the list.</p><ul><li><p>Input :<br> P: Target TCP posture.<br> v: Blend distance (Unit (mm))<br><strong>※ Unlike MovePB, it does not support ratio blending.</strong></p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,0,0,0,0}</span></span>
<span class="line"><span>point my_point2 = {150,0,50,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_lb_add(my_point1, 20)  # add ‘my_point1’ to the MoveLB list + blending distance = 20mm</span></span>
<span class="line"><span>move_lb_add(my_point2, 20)  # add ‘my_point2’ to the MoveLB list + blending distance = 20mm</span></span></code></pre></div><h4 id="_7-25-move-lb-run-v-v-v-v-1" tabindex="-1">7.25 move_lb_run(v, v, v, v=1) <a class="header-anchor" href="#_7-25-move-lb-run-v-v-v-v-1" aria-label="Permalink to &quot;7.25 move_lb_run(v, v, v, v=1)&quot;">​</a></h4><p>This function executes MoveLB using the points added in move_lb_add.</p><ul><li><p>Input :<br> v: Speed (Unit: 𝒎𝒎/𝒔)<br> v: Acceleration (Unit: 𝒎𝒎/𝒔𝟐)<br> v: Orientation options</p><ul><li>0 = Intended (Follows the rotation value taught by the user)</li><li>1 = Constant (Keep the rotation value of the starting position)</li></ul><p>v: Wait flag <strong>(default: 1)</strong></p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,200,0,0,0,0}</span></span>
<span class="line"><span>point my_point2 = {150,0,50,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_lb_clear()  # clear MoveLB list.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_lb_add(my_point1, 20)   # add ‘my_point1’ to the MoveLB list.</span></span>
<span class="line"><span>move_lb_add(my_point2, 20)   # add ‘my_point2’ to the MoveLB list.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_lb_run(50, 20, 1)  # Move to ‘my_point2’ using the previously set distance 20mm blending option.</span></span>
<span class="line"><span>                        # At this time, the rotation value maintains the same value as the starting position.</span></span></code></pre></div><h4 id="_7-26-move-c-points-p-p-v-v-v-v-1" tabindex="-1">7.26 move_c_points(P, P, v, v, v, v=1) <a class="header-anchor" href="#_7-26-move-c-points-p-p-v-v-v-v-1" aria-label="Permalink to &quot;7.26 move_c_points(P, P, v, v, v, v=1)&quot;">​</a></h4><p>This function performs a movement that draws an arc through via &amp; target points.</p><ul><li><p>Input :<br> P: via Point TCP posture<br> P: target Point TCP posture<br> v: Speed (Unit: 𝒎𝒎/𝒔)<br> v: Acceleration (Unit: 𝒎𝒎/𝒔𝟐)<br> v: Orientation options</p><ul><li>0 = Intended (Follows the rotation value taught by the user)</li><li>1 = Constant (Keep the rotation value of the starting position)</li><li>2 = Radial (Rotate the TCP according to the rotation of the circle)</li><li>3 = Smooth (Similar to Intended, but with a smooth rate of rotation change)</li></ul><p>v: Wait flag <strong>(default: 1)</strong></p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point1 = {100,100,300,0,90,0}</span></span>
<span class="line"><span>point my_point2 = {200,200,200,0,90,45}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_c_points(my_point, my_point2, 50, 10, 2)</span></span>
<span class="line"><span># Using ‘my_point1’ as a via-waypoint, it moves in an arc to ‘my_point2’.</span></span>
<span class="line"><span># Based on the center point of the rotation, the orientation of the TCP is changed together.</span></span></code></pre></div><h4 id="_7-27-move-c-axis-p-v-v-v-v-v-v-v-v-1" tabindex="-1">7.27 move_c_axis(P, v, v, v, v, v, v, v, v=1) <a class="header-anchor" href="#_7-27-move-c-axis-p-v-v-v-v-v-v-v-v-1" aria-label="Permalink to &quot;7.27 move_c_axis(P, v, v, v, v, v, v, v, v=1)&quot;">​</a></h4><p>This function performs an arc movement using the rotation center and rotation axis information.</p><ul><li><p>Input :<br> P: Center of the rotation <strong>(Unit: mm)</strong><br> v: rotation axis’s x axis vector<br> v: rotation axis’s y axis vector<br> v: rotation axis’s z axis vector<br> v: rotation angle <strong>(Unit: deg)</strong><br> v: Speed <strong>(Unit: 𝒎𝒎/𝒔)</strong><br> v: Acceleration <strong>(Unit: 𝒎𝒎/𝒔𝟐)</strong><br> v: Rotation options</p><ul><li>0 = Intended <strong>(rotate the same way as the Constant below.)</strong></li><li>1 = Constant (Keep the rotation value of the starting position)</li><li>2 = Radial (Rotate the TCP according to the rotation of the circle)</li></ul><p>v: Wait flag <strong>(default: 1)</strong></p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>point my_point = {200,200,200,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_c_axis(my_point, 1, 0, 0, 180, 50, 10, 2)</span></span>
<span class="line"><span># Rotate 180 degrees around the x-axis. Center of rotation is ‘my_point’.</span></span>
<span class="line"><span># Based on the center point of the rotation, the orientation of the TCP is changed together.</span></span></code></pre></div><h4 id="_7-28-move-jb-clear" tabindex="-1">7.28 move_jb_clear() <a class="header-anchor" href="#_7-28-move-jb-clear" aria-label="Permalink to &quot;7.28 move_jb_clear()&quot;">​</a></h4><p>Initialize (Clear) the point list to be used in MoveJB.</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>move_jb_clear()   # Initialize (Clear) the point list to be used in MoveJB.</span></span></code></pre></div><h4 id="_7-29-move-jb-add-j" tabindex="-1">7.29 move_jb_add(J) <a class="header-anchor" href="#_7-29-move-jb-add-j" aria-label="Permalink to &quot;7.29 move_jb_add(J)&quot;">​</a></h4><p>This function adds the joint-angles used in MoveJB to the list.</p><ul><li><p>Input :<br> J: Target joint angles</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>jnt my_joint1 = {0, 0,0,0,0,0}</span></span>
<span class="line"><span>jnt my_joint2 = {90,30,15,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_jb_add(my_joint1)  # add ‘my_joint1’ to the MoveJB list.</span></span>
<span class="line"><span>move_jb_add(my_joint2)  # add ‘my_joint2’ to the MoveJB list.</span></span></code></pre></div><h4 id="_7-30-move-jb-run-v-v-v-1" tabindex="-1">7.30 move_jb_run(v, v, v=1) <a class="header-anchor" href="#_7-30-move-jb-run-v-v-v-1" aria-label="Permalink to &quot;7.30 move_jb_run(v, v, v=1)&quot;">​</a></h4><p>This function executes MoveJB using the points added in move_jb_add.</p><ul><li><p>Input :<br> v: Speed (𝒅𝒆𝒈/𝒔)<br> v: Acceleration (𝒅𝒆𝒈/𝒔𝟐)<br> v: Wait flag <strong>(default: 1)</strong></p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>jnt my_joint1 = {0, 0,0,0,0,0}</span></span>
<span class="line"><span>jnt my_joint2 = {90,30,15,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_jb_clear()         # Clear the MoveJB list.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_jb_add(my_joint1)  # add ‘my_joint1’ to the MoveJB list.</span></span>
<span class="line"><span>move_jb_add(my_joint2)  # add ‘my_joint2’ to the MoveJB list.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>move_jb_run(50, 20)     # Moves smoothly without stopping to the previously set joint angles.</span></span></code></pre></div><h4 id="_7-31-move-jb2-clear" tabindex="-1">7.31 move_jb2_clear() <a class="header-anchor" href="#_7-31-move-jb2-clear" aria-label="Permalink to &quot;7.31 move_jb2_clear()&quot;">​</a></h4><p>Initialize (Clear) the point list to be used in MoveJB2 (Time-based Blending).</p><ul><li><p>Input :<br> None.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># Initialize (Clear) the point list to be used in MoveJB2.</span></span>
<span class="line"><span>move_jb2_clear()</span></span></code></pre></div><h4 id="_7-32-move-jb2-add-j-v-v-0-v" tabindex="-1">7.32 move_jb2_add(J, v, v, 0, v) <a class="header-anchor" href="#_7-32-move-jb2-add-j-v-v-0-v" aria-label="Permalink to &quot;7.32 move_jb2_add(J, v, v, 0, v)&quot;">​</a></h4><p>This function adds the joint-angles used in MoveJB2 to the list.</p><ul><li><p>Input :<br> J: Target joint angles<br> v: Speed (𝒅𝒆𝒈/𝒔)<br> v: Acceleration (𝒅𝒆𝒈/𝒔𝟐)<br> 0: dummy<br> v: Blending Rate (%)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>jnt my_joint1 = {0, 0,0,0,0,0}</span></span>
<span class="line"><span>jnt my_joint2 = {90,30,15,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add ‘my_joint1’ to the MoveJB2 list. (with 50% blend rate)</span></span>
<span class="line"><span>move_jb2_add(my_joint1, 60, 80, 0, 50)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add ‘my_joint2’ to the MoveJB2 list. (with 100% blend rate)</span></span>
<span class="line"><span>move_jb2_add(my_joint2, 90, 100, 0, 100)</span></span></code></pre></div><h4 id="_7-33-move-jb2-run-v-1" tabindex="-1">7.33 move_jb2_run( v=1) <a class="header-anchor" href="#_7-33-move-jb2-run-v-1" aria-label="Permalink to &quot;7.33 move_jb2_run( v=1)&quot;">​</a></h4><p>This function executes MoveJB2 using the points added in move_jb_add2.</p><ul><li><p>Input :<br> v: Wait flag (default: 1)</p><ul><li>0 = No Wait (Non-Block).</li><li>1 = Wait for the movement to complete (Block).</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>jnt my_joint1 = {0, 0,0,0,0,0}</span></span>
<span class="line"><span>jnt my_joint2 = {90,30,15,0,0,0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Clear the MoveJB2 list.</span></span>
<span class="line"><span>move_jb2_clear()</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add ‘my_joint1’ to the MoveJB2 list.</span></span>
<span class="line"><span>move_jb2_add(my_joint1, 10, 20, 0, 100)</span></span>
<span class="line"><span># add ‘my_joint2’ to the MoveJB2 list.</span></span>
<span class="line"><span>move_jb2_add(my_joint2, 60, 80, 0, 80)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Moves smoothly without stopping to the previously set joint angles.</span></span>
<span class="line"><span>move_jb2_run()</span></span></code></pre></div><h4 id="_7-34-servo-j" tabindex="-1">7.34 Servo J <a class="header-anchor" href="#_7-34-servo-j" aria-label="Permalink to &quot;7.34 Servo J&quot;">​</a></h4><p>move_servo_j(jnt[j0, j1, j2, j3, j4, j5], t1, t2, gain, alpha)</p><ul><li>j0 ~ j5 : Desired Joint angle in degree (-360 ~ 360)</li><li>t1 : Time to arrive at target point (t1 &gt;= 0.002)</li><li>t2 : Time to maintain the motion after arrival (0.02 &lt; t2 &lt; 0.2)</li><li>gain : Velocity tracking rate (gain &gt; 0)</li><li>alpha : low-pass-filter gain. Smaller gain makes the motion smoother (0 &lt; alpha &lt; 1)</li></ul><h4 id="_7-35-servo-l" tabindex="-1">7.35 Servo L <a class="header-anchor" href="#_7-35-servo-l" aria-label="Permalink to &quot;7.35 Servo L&quot;">​</a></h4><p>move_servo_l(pnt[x, y, z, rx, ry, rz], t1, t2, gain, alpha)</p><ul><li>x,y,z,rx,ry,rz : Desired Cartesian posture in mm,deg unit (ZY&#39;X&#39;&#39; Euler)</li><li>t1 : Time to arrive at target point (t1 &gt;= 0.002)</li><li>t2 : Time to maintain the motion after arrival (0.02 &lt; t2 &lt; 0.2)</li><li>gain : Velocity tracking rate (gain &gt; 0)</li><li>alpha : low-pass-filter gain. Smaller gain makes the motion smoother (0 &lt; alpha &lt; 1)</li></ul><h4 id="_7-36-servo-t" tabindex="-1">7.36 Servo T <a class="header-anchor" href="#_7-36-servo-t" aria-label="Permalink to &quot;7.36 Servo T&quot;">​</a></h4><p>move_servo_t(jnt[jt0, jt1, jt2, jt3, jt4, jt5], t1, t2, mode)</p><ul><li>jt0 ~ jt5 : Torque values in Nm unit</li><li>t1 : Time to arrive at target point (t1 &gt;= 0.002)</li><li>t2 : Time to maintain the motion after arrival (0.02 &lt; t2 &lt; 0.3)</li><li>mode :<br> 0 = Absolute mode : Control torque = Input torque<br> 1 = Relative mode 1 : Control torque = Input torque + Robot arm weight<br> 2 = Relative mode 2 : Control torque = Input torque + Friction compensation 30%<br> 3 = Relative mode 3 : Control torque = Input code + Robot arm weight + Friction compensation 30%</li></ul><h4 id="_7-37-speed-j" tabindex="-1">7.37 Speed J <a class="header-anchor" href="#_7-37-speed-j" aria-label="Permalink to &quot;7.37 Speed J&quot;">​</a></h4><p>move_speed_j(jnt[dj0, dj1, dj2, dj3, dj4, dj5], t1, t2, gain, alpha)</p><ul><li>dj0 ~ dj5 : Desired Joint angle speed in degree / sec(deg/s)</li><li>t1 : Time to arrive at target point (t1 &gt;= 0.002)</li><li>t2 : Time to maintain the motion after arrival (0.02 &lt; t2 &lt; 0.2)</li><li>gain : Speed tracking rate (gain = 1)</li><li>alpha : Low-pass-filter gain. Smaller gain makes the motion smoother (0 &lt; alpha &lt; 1)</li></ul><h4 id="_7-38-speed-l" tabindex="-1">7.38 Speed L <a class="header-anchor" href="#_7-38-speed-l" aria-label="Permalink to &quot;7.38 Speed L&quot;">​</a></h4><p>move_speed_l(pnt[dx, dy, dz, drx, dry, drz], t1, t2, gain, alpha)</p><ul><li>dx,dy,dz,drx,dry,drz : Desired Cartesian posture speed in mm/s, deg/s unit (ZY&#39;X&#39;&#39; Euler)</li><li>t1 : Time to arrive at target point (t1 &gt;= 0.002)</li><li>t2 : Time to maintain the motion after arrival (0.02 &lt; t2 &lt; 0.2)</li><li>gain : Speed tracking rate (gain &gt; 0)</li><li>alpha : low-pass-filter gain. Smaller gain makes the motion smoother (0 &lt; alpha &lt; 1)</li></ul><h4 id="_7-39-jog-l" tabindex="-1">7.39 Jog-L <a class="header-anchor" href="#_7-39-jog-l" aria-label="Permalink to &quot;7.39 Jog-L&quot;">​</a></h4><p>jog_robot_l(mode, x speed, y speed, z speed, rx speed, ry speed, rz speed)<br> jog_robot_l(mode, x speed, y speed, z speed, rx speed, ry speed, rz speed, acc_rate, dec_rate)</p><ul><li>Mode<br> 0: Stop<br> 1: Global coordinate system<br> 2: Tool coordinate system<br> 3 ~ 5: User coordinate system 0~2</li><li>x,y,z speed<br> mm/s unit (-250 ~ 250)</li><li>rx,ry,rz speed<br> deg/s unit (-45 ~ 45)</li><li>Acceleration/deceleration rate<br> Default value 1.0<br> Range: 0~10.0<br> Larger value means faster acceleration/deceleration, smaller value means slower acceleration/deceleration</li></ul><h4 id="_7-40-jog-j" tabindex="-1">7.40 Jog-J <a class="header-anchor" href="#_7-40-jog-j" aria-label="Permalink to &quot;7.40 Jog-J&quot;">​</a></h4><p>jog_robot_j(mode, 0 speed, 1 speed, 2 speed, 3 speed, 4 speed, 5 speed)<br> jog_robot_j(mode, 0 speed, 1 speed, 2 speed, 3 speed, 4 speed, 5 speed, acc_rate, dec_rate)</p><ul><li>Mode<br> 0: Stop<br> 1: Robot arm joint<br> 2: Additional axis</li><li>Speed 0~5<br> Unit: deg/s (depending on the speed limit range of each axis)</li><li>Acceleration/deceleration rate<br> Default 1.0<br> Range: 0~10.0<br> If it is large, it accelerates/decelerates faster, if it is small, it accelerates/decelerates slowly</li></ul><h3 id="_8-grippers-and-sensors" tabindex="-1">8. GRIPPERS AND SENSORS <a class="header-anchor" href="#_8-grippers-and-sensors" aria-label="Permalink to &quot;8. GRIPPERS AND SENSORS&quot;">​</a></h3><br><h4 id="_8-1-gripper-rtq-hande-init-v" tabindex="-1">8.1 gripper_rtq_hande_init(v) <a class="header-anchor" href="#_8-1-gripper-rtq-hande-init-v" aria-label="Permalink to &quot;8.1 gripper_rtq_hande_init(v)&quot;">​</a></h4><p>Robotiq - Hand-E gripper initialization.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_hande_init(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-2-gripper-rtq-hande-reset-v" tabindex="-1">8.2 gripper_rtq_hande_reset(v) <a class="header-anchor" href="#_8-2-gripper-rtq-hande-reset-v" aria-label="Permalink to &quot;8.2 gripper_rtq_hande_reset(v)&quot;">​</a></h4><p>Robotiq - Hand-E gripper reset.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_hande_reset(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-3-gripper-rtq-hande-go-v-v-v-v" tabindex="-1">8.3 gripper_rtq_hande_go(v, v, v, v) <a class="header-anchor" href="#_8-3-gripper-rtq-hande-go-v-v-v-v" aria-label="Permalink to &quot;8.3 gripper_rtq_hande_go(v, v, v, v)&quot;">​</a></h4><p>Robotiq - Hand-E gripper movement.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul><p>v: Target position % (Range: 0~100)<br> v: Target Velocity % (Range: 0~100)<br> v: Target Force % (Range: 0~100)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_hande_go(1, 100, 50, 100)</span></span>
<span class="line"><span># Move the gripper connected to the control box to position 100%. (with speed 50%, force 100%)</span></span></code></pre></div><h4 id="_8-4-gripper-rtq-2f85-init-v" tabindex="-1">8.4 gripper_rtq_2f85_init(v) <a class="header-anchor" href="#_8-4-gripper-rtq-2f85-init-v" aria-label="Permalink to &quot;8.4 gripper_rtq_2f85_init(v)&quot;">​</a></h4><p>Robotiq – 2F85 gripper initialization.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_2f85_init(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-5-gripper-rtq-2f85-reset-v" tabindex="-1">8.5 gripper_rtq_2f85_reset(v) <a class="header-anchor" href="#_8-5-gripper-rtq-2f85-reset-v" aria-label="Permalink to &quot;8.5 gripper_rtq_2f85_reset(v)&quot;">​</a></h4><p>Robotiq – 2F85 gripper reset.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_2f85_reset(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-6-gripper-rtq-2f85-go-v-v-v-v" tabindex="-1">8.6 gripper_rtq_2f85_go(v, v, v, v) <a class="header-anchor" href="#_8-6-gripper-rtq-2f85-go-v-v-v-v" aria-label="Permalink to &quot;8.6 gripper_rtq_2f85_go(v, v, v, v)&quot;">​</a></h4><p>Robotiq – 2F85 gripper movement.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul><p>v: Target position % (Range: 0~100)<br> v: Target Velocity % (Range: 0~100)<br> v: Target Force % (Range: 0~100)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_2f85_go(1, 100, 50, 100)</span></span>
<span class="line"><span># Move the gripper connected to the control box to position 100%. (with speed 50%, force 100%)</span></span></code></pre></div><h4 id="_8-7-gripper-rtq-2f140-init-v" tabindex="-1">8.7 gripper_rtq_2f140_init(v) <a class="header-anchor" href="#_8-7-gripper-rtq-2f140-init-v" aria-label="Permalink to &quot;8.7 gripper_rtq_2f140_init(v)&quot;">​</a></h4><p>Robotiq – 2F140 gripper initialization.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_2f140_init(1)   # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-8-gripper-rtq-2f140-reset-v" tabindex="-1">8.8 gripper_rtq_2f140_reset(v) <a class="header-anchor" href="#_8-8-gripper-rtq-2f140-reset-v" aria-label="Permalink to &quot;8.8 gripper_rtq_2f140_reset(v)&quot;">​</a></h4><p>Robotiq – 2F140 gripper reset.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_2f140_reset(1)   # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-9-gripper-rtq-2f140-go-v-v-v-v" tabindex="-1">8.9 gripper_rtq_2f140_go(v, v, v, v) <a class="header-anchor" href="#_8-9-gripper-rtq-2f140-go-v-v-v-v" aria-label="Permalink to &quot;8.9 gripper_rtq_2f140_go(v, v, v, v)&quot;">​</a></h4><p>Robotiq – 2F140 gripper movement.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul><p>v: Target position % (Range: 0~100)<br> v: Target Velocity % (Range: 0~100)<br> v: Target Force % (Range: 0~100)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_2f140_go(1, 100, 50, 100)</span></span>
<span class="line"><span># Move the gripper connected to the control box to position 100%. (with speed 50%, force 100%)</span></span></code></pre></div><h4 id="_8-10-gripper-rtq-epick-reset-v" tabindex="-1">8.10 gripper_rtq_epick_reset(v) <a class="header-anchor" href="#_8-10-gripper-rtq-epick-reset-v" aria-label="Permalink to &quot;8.10 gripper_rtq_epick_reset(v)&quot;">​</a></h4><p>Robotiq – E-pick gripper reset.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_epick_reset(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-11-gripper-rtq-epick-suction-v" tabindex="-1">8.11 gripper_rtq_epick_suction(v) <a class="header-anchor" href="#_8-11-gripper-rtq-epick-suction-v" aria-label="Permalink to &quot;8.11 gripper_rtq_epick_suction(v)&quot;">​</a></h4><p>Robotiq – E-pick gripper suction.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_epick_suction(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-12-gripper-rtq-epick-release-v" tabindex="-1">8.12 gripper_rtq_epick_release(v) <a class="header-anchor" href="#_8-12-gripper-rtq-epick-release-v" aria-label="Permalink to &quot;8.12 gripper_rtq_epick_release(v)&quot;">​</a></h4><p>Robotiq – E-pick gripper release.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_epick_release(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-13-gripper-rtq-epick-hold-v" tabindex="-1">8.13 gripper_rtq_epick_hold(v) <a class="header-anchor" href="#_8-13-gripper-rtq-epick-hold-v" aria-label="Permalink to &quot;8.13 gripper_rtq_epick_hold(v)&quot;">​</a></h4><p>Robotiq – E-pick gripper hold.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rtq_epick_hold(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-14-gripper-rts-rhp12rn-init-v" tabindex="-1">8.14 gripper_rts_rhp12rn_init(v) <a class="header-anchor" href="#_8-14-gripper-rts-rhp12rn-init-v" aria-label="Permalink to &quot;8.14 gripper_rts_rhp12rn_init(v)&quot;">​</a></h4><p>Robotis – RHP12RN gripper initialization.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rts_rhp12rn_init(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-15-gripper-rts-rhp12rn-go-v-v" tabindex="-1">8.15 gripper_rts_rhp12rn_go(v, v) <a class="header-anchor" href="#_8-15-gripper-rts-rhp12rn-go-v-v" aria-label="Permalink to &quot;8.15 gripper_rts_rhp12rn_go(v, v)&quot;">​</a></h4><p>Robotis – RHP12RN gripper movement.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul><p>v: Target position % (Range: 0~100)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_rts_rhp12rn_go(1, 100)  # Move the gripper connected to the control box to 100% position.</span></span></code></pre></div><h4 id="_8-16-gripper-jrt-jegb485-init-v" tabindex="-1">8.16 gripper_jrt_jegb485_init(v) <a class="header-anchor" href="#_8-16-gripper-jrt-jegb485-init-v" aria-label="Permalink to &quot;8.16 gripper_jrt_jegb485_init(v)&quot;">​</a></h4><p>JRT – JEGB485 gripper initialization.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_jrt_jegb485_init(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-17-gripper-jrt-jegb485-go-v-v" tabindex="-1">8.17 gripper_jrt_jegb485_go(v, v) <a class="header-anchor" href="#_8-17-gripper-jrt-jegb485-go-v-v" aria-label="Permalink to &quot;8.17 gripper_jrt_jegb485_go(v, v)&quot;">​</a></h4><p>JRT – JEGB485 gripper movement.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul><p>v: Target position % (Range: 0~100)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_jrt_jegb485_go(1, 100)  # Move the gripper connected to the control box to 100% position.</span></span></code></pre></div><h4 id="_8-18-gripper-jrt-jegb485-go-v-v-v-v" tabindex="-1">8.18 gripper_jrt_jegb485_go(v, v, v, v) <a class="header-anchor" href="#_8-18-gripper-jrt-jegb485-go-v-v-v-v" aria-label="Permalink to &quot;8.18 gripper_jrt_jegb485_go(v, v, v, v)&quot;">​</a></h4><p>JRT – JEGB485 gripper movement with advanced setting.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul><p>v: Target position % (Range: 0~100)<br> v: Target Velocity % (Range: 0~100)<br> v: Target acceleration % (Range: 0~100)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_jrt_jegb485_go(1, 100, 50, 50)</span></span>
<span class="line"><span># Move the gripper connected to the control box to 100% position. (with speed &amp; acceleration 50%)</span></span></code></pre></div><h4 id="_8-19-gripper-jrt-jegb485-set-v-v-v-v" tabindex="-1">8.19 gripper_jrt_jegb485_set(v, v, v, v) <a class="header-anchor" href="#_8-19-gripper-jrt-jegb485-set-v-v-v-v" aria-label="Permalink to &quot;8.19 gripper_jrt_jegb485_set(v, v, v, v)&quot;">​</a></h4><p>JRT – JEGB485 gripper setting.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul><p>v: Target Velocity % (Range: 0~100)<br> v: Target acceleration % (Range: 0~100)<br> v: Target Force % (Range: 0~100)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_jrt_jegb485_set(1, 50, 30, 20)</span></span>
<span class="line"><span># Set the motion properties speed/acceleration/force of the gripper connected to the control box to 50, 30, and 20%, respectively</span></span></code></pre></div><h4 id="_8-20-gripper-jrt-jegb4140-init-v" tabindex="-1">8.20 gripper_jrt_jegb4140_init(v) <a class="header-anchor" href="#_8-20-gripper-jrt-jegb4140-init-v" aria-label="Permalink to &quot;8.20 gripper_jrt_jegb4140_init(v)&quot;">​</a></h4><p>JRT – JEGB4140 gripper initialization.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_jrt_jegb4140_init(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-21-gripper-jrt-jegb4140-go-v-v" tabindex="-1">8.21 gripper_jrt_jegb4140_go(v, v) <a class="header-anchor" href="#_8-21-gripper-jrt-jegb4140-go-v-v" aria-label="Permalink to &quot;8.21 gripper_jrt_jegb4140_go(v, v)&quot;">​</a></h4><p>JRT – JEGB4140 gripper movement.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul><p>v: Target position % (Range: 0~100)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_jrt_jegb4140_go(1, 100)  # Move the gripper connected to the control box to 100% position.</span></span></code></pre></div><h4 id="_8-22-gripper-jrt-jegb4140-go-v-v-v-v" tabindex="-1">8.22 gripper_jrt_jegb4140_go(v, v, v, v) <a class="header-anchor" href="#_8-22-gripper-jrt-jegb4140-go-v-v-v-v" aria-label="Permalink to &quot;8.22 gripper_jrt_jegb4140_go(v, v, v, v)&quot;">​</a></h4><p>JRT – JEGB4140 gripper movement with advanced setting.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul><p>v: Target position % (Range: 0~100)<br> v: Target Velocity % (Range: 0~100)<br> v: Target acceleration % (Range: 0~100)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_jrt_jegb4140_go(1, 100, 50, 50)</span></span>
<span class="line"><span># Move the gripper connected to the control box to 100% position. (with speed &amp; acceleration 50%)</span></span></code></pre></div><h4 id="_8-23-gripper-jrt-jegb4140-set-v-v-v-v" tabindex="-1">8.23 gripper_jrt_jegb4140_set(v, v, v, v) <a class="header-anchor" href="#_8-23-gripper-jrt-jegb4140-set-v-v-v-v" aria-label="Permalink to &quot;8.23 gripper_jrt_jegb4140_set(v, v, v, v)&quot;">​</a></h4><p>JRT – JEGB4140 gripper setting.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul><p>v: Target Velocity % (Range: 0~100)<br> v: Target acceleration % (Range: 0~100)<br> v: Target Force % (Range: 0~100)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_jrt_jegb4140_set(1, 50, 30, 20)</span></span>
<span class="line"><span># Set the motion properties speed/acceleration/force of the gripper connected to the control box to 50, 30, and 20%, respectively</span></span></code></pre></div><h4 id="_8-24-gripper-dh-ag95-init-v" tabindex="-1">8.24 gripper_dh_ag95_init(v) <a class="header-anchor" href="#_8-24-gripper-dh-ag95-init-v" aria-label="Permalink to &quot;8.24 gripper_dh_ag95_init(v)&quot;">​</a></h4><p>DH Robotics – AG95 gripper initialization.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_dh_ag95_init(1)  # When the gripper communication line is connected to the control box</span></span></code></pre></div><h4 id="_8-25-gripper-dh-ag95-gripforce-v-v" tabindex="-1">8.25 gripper_dh_ag95_gripforce(v, v) <a class="header-anchor" href="#_8-25-gripper-dh-ag95-gripforce-v-v" aria-label="Permalink to &quot;8.25 gripper_dh_ag95_gripforce(v, v)&quot;">​</a></h4><p>DH Robotics – AG95 gripper grip-force setting.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box.</li></ul><p>v: Gripping force % (20 ~ 100 %)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_dh_ag95_gripforce(1, 30)</span></span>
<span class="line"><span># Set the gripping force limit of the gripper connected to the control box to 30%.</span></span></code></pre></div><h4 id="_8-26-gripper-dh-ag95-openforce-v-v" tabindex="-1">8.26 gripper_dh_ag95_openforce(v, v) <a class="header-anchor" href="#_8-26-gripper-dh-ag95-openforce-v-v" aria-label="Permalink to &quot;8.26 gripper_dh_ag95_openforce(v, v)&quot;">​</a></h4><p>DH Robotics – AG95 gripper open-force setting.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box. or USB</li></ul><p>v: Opening force % (20 ~ 100 %)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_dh_ag95_openforce(1, 70)</span></span>
<span class="line"><span># Set the opening force limit of the gripper connected to the control box to 70%.</span></span></code></pre></div><h4 id="_8-27-gripper-dh-ag95-go-v-v" tabindex="-1">8.27 gripper_dh_ag95_go(v, v) <a class="header-anchor" href="#_8-27-gripper-dh-ag95-go-v-v" aria-label="Permalink to &quot;8.27 gripper_dh_ag95_go(v, v)&quot;">​</a></h4><p>DH Robotics – AG95 gripper movement.</p><ul><li><p>Input :<br> v: Connection port for the Gripper/Sensor.</p><ul><li>0 = RS485 of the Tool Flange board.</li><li>1 = RS485 of the Control Box. or USB</li></ul><p>v: Target position % (0 ~ 100 %)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_dh_ag95_go(1, 50)   # Move the gripper connected to the control box to the 50% position.</span></span></code></pre></div><h4 id="_8-28-gripper-setech-cmd-v" tabindex="-1">8.28 gripper_setech_cmd(v) <a class="header-anchor" href="#_8-28-gripper-setech-cmd-v" aria-label="Permalink to &quot;8.28 gripper_setech_cmd(v)&quot;">​</a></h4><p>Setech –NutRunner</p><ul><li><p>Input :<br> v: Command number</p><ul><li>0 = Stop</li><li>1 = Reset</li><li>2 = Quick Start</li><li>3 = First stage</li><li>4 = Second stage</li><li>5 = Reverse</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gripper_setech_cmd(#)</span></span></code></pre></div><h3 id="_9-communication-functions" tabindex="-1">9. COMMUNICATION FUNCTIONS <a class="header-anchor" href="#_9-communication-functions" aria-label="Permalink to &quot;9. COMMUNICATION FUNCTIONS&quot;">​</a></h3><br><h4 id="_9-1-mc-comm-set-bit-v-s-v-v-1" tabindex="-1">9.1 mc_comm_set_bit(v, S, v, v=1) <a class="header-anchor" href="#_9-1-mc-comm-set-bit-v-s-v-v-1" aria-label="Permalink to &quot;9.1 mc_comm_set_bit(v, S, v, v=1)&quot;">​</a></h4><p>It sends the desired bit data (1 bit) to the desired address value of the PLC equipment. (via MC Protocol provided by Mitsubishi)</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)<br> S: address of the PLC (string type)</p><ul><li>address value is in the form of D...., X...., etc.<br></li></ul><p>v: Desired bit data (0 or 1)<br> v: Handshake signal Timeout <strong>(Unit: second) (default: 1)</strong></p></li><li><p>Return :<br> v: Whether or not a valid (Handshake) signal is received from the PLC</p><ul><li>0: Receive Fail</li><li>1: Receive Success</li></ul></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str target_address = “D2000”</span></span>
<span class="line"><span>var target_write_value = 1</span></span>
<span class="line"><span>var is_tx_success = mc_comm_set_bit(0, target_address, target_write_value)</span></span>
<span class="line"><span># Using socket 0, send value 1 to PLC address D2000.</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Same meaning can be written as below.</span></span>
<span class="line"><span>var is_tx_success = mc_comm_set_bit(0, “D2000”, 1)</span></span></code></pre></div><h4 id="_9-2-mc-comm-set-word-v-s-v-v-1" tabindex="-1">9.2 mc_comm_set_word(v, S, v, v=1) <a class="header-anchor" href="#_9-2-mc-comm-set-word-v-s-v-v-1" aria-label="Permalink to &quot;9.2 mc_comm_set_word(v, S, v, v=1)&quot;">​</a></h4><p>It sends the desired word data (16 bits) to the desired address value of the PLC equipment. (via MC Protocol provided by Mitsubishi)</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)<br> S: address of the PLC (string type)</p><ul><li>address value is in the form of D...., X...., etc.<br></li></ul><p>v: Desired word data<br> v: Handshake signal Timeout <strong>(Unit: second) (default: 1)</strong></p></li><li><p>Return :<br> v: Whether or not a valid (Handshake) signal is received from the PLC</p><ul><li>0: Receive Fail</li><li>1: Receive Success</li></ul></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str target_address = “D2000”</span></span>
<span class="line"><span>var target_write_value = 150</span></span>
<span class="line"><span>var is_tx_success = mc_comm_set_word(0, target_address, target_write_value)</span></span>
<span class="line"><span># Using socket 0, send value 150 to PLC address D2000.</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Same meaning can be written as below.</span></span>
<span class="line"><span>var is_tx_success = mc_comm_set_word(0, “D2000”, 150)</span></span></code></pre></div><h4 id="_9-3-mc-comm-req-bit-v-s-v-1" tabindex="-1">9.3 mc_comm_req_bit(v, S, v=1) <a class="header-anchor" href="#_9-3-mc-comm-req-bit-v-s-v-1" aria-label="Permalink to &quot;9.3 mc_comm_req_bit(v, S, v=1)&quot;">​</a></h4><p>It reads the desired bit data (1 bit) from the desired address value of the PLC equipment. (via MC Protocol provided by Mitsubishi)</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)<br> S: address of the PLC (string type)</p><ul><li>address value is in the form of D...., X...., etc.<br></li></ul><p>v: Handshake signal Timeout <strong>(Unit: second) (default: 1)</strong></p></li><li><p>Return :<br> v: Bit data value received from PLC.</p><ul><li>-1: Receive Fail</li><li>0 or 1: Received bit value</li></ul></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str target_address = “D2000”</span></span>
<span class="line"><span>var rx_data = mc_comm_req_bit(0, target_address)</span></span>
<span class="line"><span># Using socket 0, read bit value from the PLC address D2000.</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Same meaning can be written as below.</span></span>
<span class="line"><span>var rx_data = mc_comm_req_bit(0, “D2000”)</span></span></code></pre></div><h4 id="_9-4-mc-comm-req-word-v-s-v-1" tabindex="-1">9.4 mc_comm_req_word(v, S, v=1) <a class="header-anchor" href="#_9-4-mc-comm-req-word-v-s-v-1" aria-label="Permalink to &quot;9.4 mc_comm_req_word(v, S, v=1)&quot;">​</a></h4><p>It reads the desired word data (16 bits) from the desired address value of the PLC equipment. (via MC Protocol provided by Mitsubishi)</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0~4)<br> S: address of the PLC (string type)</p><ul><li>address value is in the form of D...., X...., etc.<br></li></ul><p>v: Handshake signal Timeout <strong>(Unit: second) (default: 1)</strong></p></li><li><p>Return :<br> v: Word data value received from PLC.</p><ul><li>-1: Receive Fail</li></ul></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str target_address = “D2000”</span></span>
<span class="line"><span>var rx_data = mc_comm_req_word(0, target_address)</span></span>
<span class="line"><span># Using socket 0, read word value from the PLC address D2000.</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Same meaning can be written as below.</span></span>
<span class="line"><span>var rx_data = mc_comm_req_word(0, “D2000”)</span></span></code></pre></div><h4 id="_9-5-socket-connect-v-s-v" tabindex="-1">9.5 socket_connect(v, S, v) <a class="header-anchor" href="#_9-5-socket-connect-v-s-v" aria-label="Permalink to &quot;9.5 socket_connect(v, S, v)&quot;">​</a></h4><p>Opens a socket port for TCP/IP communication and connects to the server.</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)<br> S: IP address of the target server (string type)</p><ul><li>i.e. ”192.168.0.10”</li></ul></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>socket_connect(0, “192.168.0.10”, 5678)</span></span>
<span class="line"><span># Using socket 0, connect to port 5678 of the server address “192.168.0.10”</span></span></code></pre></div><h4 id="_9-6-socket-disconnect-v" tabindex="-1">9.6 socket_disconnect(v) <a class="header-anchor" href="#_9-6-socket-disconnect-v" aria-label="Permalink to &quot;9.6 socket_disconnect(v)&quot;">​</a></h4><p>Closes the socket port for TCP/IP communication and disconnects.</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>socket_disconnect(0)    # Disconnect opened communication on socket 0 and exit.</span></span></code></pre></div><h4 id="_9-7-socket-send-str-v-s" tabindex="-1">9.7 socket_send_str(v, S) <a class="header-anchor" href="#_9-7-socket-send-str-v-s" aria-label="Permalink to &quot;9.7 socket_send_str(v, S)&quot;">​</a></h4><p>Transmits a string to the server through TCP/IP communication.</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)<br> S: Target string for the transmission.</p></li><li><p>Return :<br> None.</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>socket_send_str(0, “hello world”)   # Send “hello world” to the server where socket 0 is connected.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var my_var = 1234</span></span>
<span class="line"><span>socket_send_str(0, to_str(my_var))  # Transmit the variable value as a string to the server connected to socket 0</span></span></code></pre></div><h4 id="_9-8-socket-read-str-v" tabindex="-1">9.8 socket_read_str(v) <a class="header-anchor" href="#_9-8-socket-read-str-v" aria-label="Permalink to &quot;9.8 socket_read_str(v)&quot;">​</a></h4><p>Returns the string received from the server through TCP/IP communication.</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)</p></li><li><p>Return :<br> S: Received string from the server</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str receive_str = socket_read_str(0)</span></span>
<span class="line"><span>if (SD_SOCKET_LAST_READ_0){</span></span>
<span class="line"><span>    debug “receive_str”</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Receives a string from the server connected to socket 0, and if there is a received string, it is displayed in the alarm window.</span></span>
<span class="line"><span># When the server sends “rainbow”, “rainbow” is stored in the receivce_str string variable.</span></span></code></pre></div><h4 id="_9-9-socket-read-var-v" tabindex="-1">9.9 socket_read_var(v) <a class="header-anchor" href="#_9-9-socket-read-var-v" aria-label="Permalink to &quot;9.9 socket_read_var(v)&quot;">​</a></h4><p>If the string received from the server through TCP/IP communication is in the form of a number, it is returned as a number.</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)</p></li><li><p>Return :<br> v: Received number from the server</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var receive_var = socket_read_var(0)</span></span>
<span class="line"><span>if (SD_SOCKET_LAST_READ_0){</span></span>
<span class="line"><span>    debug “receive_var”</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Receives a string from the server connected to socket 0, and converts the received string into a numeric variable. And if there is a reception, it is displayed in the alarm window.</span></span>
<span class="line"><span># When the server sends “123.456”, 123.456 is stored in the receivce_var.</span></span></code></pre></div><h4 id="_9-10-hmi-set-one-word-v-v-v-v-1" tabindex="-1">9.10 hmi_set_one_word (v, v, v, v=1) <a class="header-anchor" href="#_9-10-hmi-set-one-word-v-v-v-v-1" aria-label="Permalink to &quot;9.10 hmi_set_one_word (v, v, v, v=1)&quot;">​</a></h4><p>It sends the desired word data (16 bits) to the desired address value of the HMI equipment. (via Memory-Link by Proface/TOP)</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)<br> v: HMI address value (0 ~ 9999)<br> v: desired value for transmission (variable)<br> v: Handshake signal Timeout <strong>(Unit: second) (default: 1)</strong></p></li><li><p>Return :<br> v: Whether or not a valid (Handshake) signal is received from the HMI.</p><ul><li>0: Receive Fail</li><li>1: Receive Success</li></ul></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var target_address = 6000</span></span>
<span class="line"><span>var target_write_value = 150</span></span>
<span class="line"><span>var is_tx_success = hmi_set_one_word(0, target_address, target_write_value)</span></span>
<span class="line"><span># Using socket 0, send the value 150 to HMI address 6000.</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Same meaning can be written as below.</span></span>
<span class="line"><span>var is_tx_success = hmi_set_one_word(0, 6000, 150)</span></span></code></pre></div><h4 id="_9-11-hmi-set-multi-word-v-v-v-v-1-a" tabindex="-1">9.11 hmi_set_multi_word (v, v, v, v=1, A) <a class="header-anchor" href="#_9-11-hmi-set-multi-word-v-v-v-v-1-a" aria-label="Permalink to &quot;9.11 hmi_set_multi_word (v, v, v, v=1, A)&quot;">​</a></h4><p>It sends the desired word data-s (16 bits x desired length) to the desired address area of the HMI equipment. (via Memory-Link by Proface/TOP)</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)<br> v: starting HMI address value (0 ~ 9999) 시작 값<br> v: Number of data to send to HMI device (Max 20)<br> v: Handshake signal Timeout <strong>(Unit: second) (default: 1)</strong> A: Array name to send</p></li><li><p>Return :<br> v: Whether or not a valid (Handshake) signal is received from the HMI.</p><ul><li>0: Receive Fail</li><li>1: Receive Success</li></ul></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>arr my_arr = {150, 160, 200, 210}</span></span>
<span class="line"><span>var is_tx_success = hmi_set_multi_word(0, 6000, 4, my_arr)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Using socket 0, send the 4 values (150, 160, 200, 210) stored in the array to the 4 address values (6000 ~ 6003) of the HMI.</span></span></code></pre></div><h4 id="_9-12-hmi-req-one-word-v-v-v-1" tabindex="-1">9.12 hmi_req_one_word (v, v, v=1) <a class="header-anchor" href="#_9-12-hmi-req-one-word-v-v-v-1" aria-label="Permalink to &quot;9.12 hmi_req_one_word (v, v, v=1)&quot;">​</a></h4><p>It reads the desired word data (16 bits) from the desired address value of the HMI equipment. (via Memory-Link provided by Proface/TOP)</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)<br> v: HMI address value (0 ~ 9999)<br> v: Handshake signal Timeout <strong>(Unit: second) (default: 1)</strong></p></li><li><p>Return :<br> v: Value stored in the corresponding address value of the HMI</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var my_num</span></span>
<span class="line"><span>my_num = hmi_req_one_word(0, 7000)</span></span>
<span class="line"><span># Using socket 0, read the value of HMI address 7000 and store it in the variable my_num.</span></span></code></pre></div><h4 id="_9-13-hmi-req-multi-word-v-v-v-v-1" tabindex="-1">9.13 hmi_req_multi_word (v, v, v, v=1) <a class="header-anchor" href="#_9-13-hmi-req-multi-word-v-v-v-v-1" aria-label="Permalink to &quot;9.13 hmi_req_multi_word (v, v, v, v=1)&quot;">​</a></h4><p>It reads the desired word data-s (16 bits x desired length) from the desired address area of the HMI equipment. (via Memory-Link provided by Proface/TOP)</p><ul><li><p>Input :<br> v: Index of Socket-Handler. (0 ~ 4)<br> v: starting HMI address value (0 ~ 9999)<br> v: Number of data to read from HMI device (Max 20)<br> v: Handshake signal Timeout <strong>(Unit: second) (default: 1)</strong></p></li><li><p>Return :<br> A: Handshake signal Timeout (array)</p></li></ul><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>arr my_array</span></span>
<span class="line"><span>my_array = hmi_req_multi_word(0, 7000, 10)</span></span>
<span class="line"><span># Using socket 0, read 10 values (address values 7000~7009) from HMI and store them in the array ‘my_array’.</span></span></code></pre></div><h3 id="_10-vector" tabindex="-1">10. VECTOR <a class="header-anchor" href="#_10-vector" aria-label="Permalink to &quot;10. VECTOR&quot;">​</a></h3><p>A vector refers to a dynamically allocated variable type. An array of unspecified length.<br></p><p>Often, in languages like C++, they are declared in the form vector&lt;float&gt; or vector&lt;string&gt;.<br> Rainbow Robotics&#39; script system supports both numeric vectors and string vectors, each corresponding to the C++ standard, vector&lt;float&gt; and vector&lt;string&gt;.</p><h4 id="_10-1-number-vector" tabindex="-1">10.1 Number Vector <a class="header-anchor" href="#_10-1-number-vector" aria-label="Permalink to &quot;10.1 Number Vector&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># The declaration uses the declarator vec.</span></span>
<span class="line"><span>vec hello_world</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Initialization is possible at the same time as declaration.</span></span>
<span class="line"><span>vec hello_world = {10, 20, 30}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># The length of the vector can be obtained with the vec_length (or vec_leng) function.</span></span>
<span class="line"><span># In this case, the input argument of the function is the name of the vector.</span></span>
<span class="line"><span>var num = vec_length( hello_world)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># To add an argument to a vector, use the vec_push (or vec_push_back, or vec_add) function.</span></span>
<span class="line"><span># In this case, the input argument of the function is the name of vector and the number to be added.</span></span>
<span class="line"><span>vec_push( hello_world, 40)</span></span>
<span class="line"><span>vec_push( hello_world, 50)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Vector can be cleared through the vec_clear (or vec_clr) function.</span></span>
<span class="line"><span># In this case, the input argument of the function is the name of the vector.</span></span>
<span class="line"><span>vec_clear(hello_world)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># If you want to refer to the value stored in the vector, use the vec_at function.</span></span>
<span class="line"><span># In this case, the input parameters of the function are the name of the vector and the index to be referenced.</span></span>
<span class="line"><span># Index references are also possible through the [] operator.</span></span>
<span class="line"><span>var value = vec_at(hello_world, 2)</span></span>
<span class="line"><span>var value = hello_world[2]</span></span></code></pre></div><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>vec mung = {10, 20}             # declare vector. Name = mung, initial values are 10 and 20</span></span>
<span class="line"><span>var my_num = vec_length(mung)   # my_num = 2 (length of the vector)</span></span>
<span class="line"><span>vec_push( mung, 30)             # Add the number 30 to the end of the mung vector</span></span>
<span class="line"><span>vec_push( mung, 40)             # Add the number 40 to the end of the mung vector</span></span>
<span class="line"><span>var my_num = vec_length(mung)   # my_num = 4 (length of the vector)</span></span>
<span class="line"><span>var a = vec_at(mung, 1)         # a = 20 (value saved in the index 1 of the vector mung)</span></span>
<span class="line"><span>var b = mung[3]                 # b = 40 (value saved in the index 3 of the vector mung)</span></span>
<span class="line"><span>vec_clear(mung)                 # clear the vector mung</span></span>
<span class="line"><span>var my_num = vec_length(mung)   # my_num = 0 (length of the vector)</span></span></code></pre></div><h4 id="_10-2-string-vector" tabindex="-1">10.2 String Vector <a class="header-anchor" href="#_10-2-string-vector" aria-label="Permalink to &quot;10.2 String Vector&quot;">​</a></h4><p>For string vectors, the usage of functions is the same as for numeric vectors.<br></p><p>However, due to system memory limitations, only predefined names can be used for string vectors.<br> There are 10 string vectors defined in the system as shown below. Users can use the string vector with the name immediately below without having to declare it.<br></p><p>Predefined string vectors : <strong>str_vec_0, str_vec_1, … , str_vec_9</strong><br></p><p>The functions used for vectors are the same as for numeric vectors introduced in the previous chapter.</p><p>Example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>vec_push(str_vec_3, “hello”)        # add “hello” to the string vector ‘str_vec_3’</span></span>
<span class="line"><span>vec_push(str_vec_3, “world”)        # add “world” to the string vector ‘str_vec_3’</span></span>
<span class="line"><span>var my_num = vec_length(str_vec_3)  # my_num = 2 (length of the vector)</span></span>
<span class="line"><span>vec_push(str_vec_3, “aa”)           # add “aa” to the string vector ‘str_vec_3’</span></span>
<span class="line"><span>vec_push(str_vec_3, “bb”)           # add “bb” to the string vector ‘str_vec_3’</span></span>
<span class="line"><span>var my_num = vec_length(str_vec_3)  # my_num = 4 (length of the vector)</span></span>
<span class="line"><span>str sa = vec_at(str_vec_3, 1)       # “world” is stored in ‘sa’ with reference to str_vec_3 vector index 1.</span></span>
<span class="line"><span>str sb = str_vec_3[3]               # “bb” is stored in ‘sb’ with reference to str_vec_3 vector index 3.</span></span>
<span class="line"><span>vec_clear(str_vec_3)                # clear the string vector ‘str_vec_3’</span></span>
<span class="line"><span>var my_num = vec_length(str_vec_3)  # my_num = 0 (length of the vector)</span></span></code></pre></div>`,1095),o=[l];function r(c,d,h,u,v,b){return t(),e("div",null,o)}const _=a(p,[["render",r]]);export{g as __pageData,_ as default};
