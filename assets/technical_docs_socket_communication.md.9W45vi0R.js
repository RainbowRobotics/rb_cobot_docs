import{_ as e,c as a,o as t,U as i,li as o,lj as s,lk as r,ll as n,lm as c,ln as l,lo as p,lp as m}from"./chunks/framework.MA5fsOsj.js";const C=JSON.parse('{"title":"Socket Communication Basic Usage Guide v2.0","description":"","frontmatter":{"layout":"doc","outline":"deep"},"headers":[],"relativePath":"technical_docs/socket_communication.md","filePath":"technical_docs/socket_communication.md"}'),d={name:"technical_docs/socket_communication.md"},h=i('<h1 id="socket-communication-basic-usage-guide-v2-0" tabindex="-1">Socket Communication Basic Usage Guide v2.0 <a class="header-anchor" href="#socket-communication-basic-usage-guide-v2-0" aria-label="Permalink to &quot;Socket Communication Basic Usage Guide v2.0&quot;">​</a></h1><h3 id="_1-basic-concept-description" tabindex="-1">1. Basic Concept Description <a class="header-anchor" href="#_1-basic-concept-description" aria-label="Permalink to &quot;1. Basic Concept Description&quot;">​</a></h3><p>There are two main methods for application development using TCP/IP socket communication provided by Rainbow Robotics.</p><h4 id="_1-1-data-exchange-based-on-general-tcp-communication" tabindex="-1">1.1 Data Exchange based on General TCP communication <a class="header-anchor" href="#_1-1-data-exchange-based-on-general-tcp-communication" aria-label="Permalink to &quot;1.1 Data Exchange based on General TCP communication&quot;">​</a></h4><ul><li>The Rainbow Robotics system can be either a server or a client of TCP/IP.</li><li>This is a method of sending and receiving only valid data (numbers, arrays, character strings, etc.) with the other PC/system.</li><li>The user configures the program using the UI program of Rainbow Robotics.</li><li>If specific data is sent from the other party&#39;s PC/system, it is possible to perform an action/program using that data.</li></ul><p><img src="'+o+'" alt="missing"></p><h4 id="_1-2-robot-control-via-external-script-command" tabindex="-1">1.2 Robot control via External Script command <a class="header-anchor" href="#_1-2-robot-control-via-external-script-command" aria-label="Permalink to &quot;1.2 Robot control via External Script command&quot;">​</a></h4><ul><li>Rainbow Robotics system acts as a server for TCP/IP. (using ports 5000/5001)</li><li>Rather than using Rainbow Robotics&#39; UI program, it is a way for users to create their own operating programs in their preferred development language.</li><li>In accordance with the dedicated script grammar stipulated by Rainbow Robotics, the user just needs to send a string.</li><li>User development language is irrelevant. (Java, C++, Python, etc.)</li><li>All user need to do is to send the script string that conforms to the RB grammar. (to the specified port.)</li></ul><p><img src="'+s+'" alt="missing"></p><p>For TCP/IP socket communication, the IP address of the Rainbow Robotics control box must be set in advance.<br> IP address and Netmask can be set through UI Program.<br> It can be set and checked in the ‘System’ menu of the ‘Setup’ page.</p><p><img src="'+r+'" alt="missing"></p><h3 id="_2-method-1-data-exchange-based-on-general-tcp-communication" tabindex="-1">2. [Method 1] Data Exchange Based on General TCP Communication <a class="header-anchor" href="#_2-method-1-data-exchange-based-on-general-tcp-communication" aria-label="Permalink to &quot;2. [Method 1] Data Exchange Based on General TCP Communication&quot;">​</a></h3><p><img src="'+n+'" alt="missing"></p><ul><li>RB system can be either a server or a client of TCP/IP.</li><li>If RB system is the server, the user system is the client and if the RB system is a client, user can make user’s system act as a server.<br> User can choose which one to use as a server according to user’s convenience.</li><li>This is a method of sending and receiving only valid data (numbers, arrays, character strings, etc.) with the other party&#39;s PC/system.</li><li>User configures the robot program using RB&#39;s UI program.</li><li>If the other party&#39;s PC/system sends specific data, the operation/program can be executed using that data.</li><li>The format of data exchanged is basically Ascii String.</li><li>Both systems send and receive data in the form of strings. If necessary, string functions can be utilized to convert a string data into a number or an array, etc.</li><li>IP addresses of both systems are configurable by the user.</li><li>For communication ports, all numbers are available except for reserved port numbers (ports less than 1000, 2000, 2001, 5000, 5001).</li></ul><br><p>The example below is a simple example of robot program configuration when [<strong>Method 1</strong>] is used.<br> This guide does not separately explain the examples below and the functions used in the examples.<br> For a description of each function and various examples, refer to the separate <u>‘Socket Communication Example Document’</u>.</p><p><img src="'+c+'" alt="missing"></p><figcaption style="text-align:center;">[ Example: when using the RB system as a TCP client ]</figcaption><p><img src="'+l+'" alt="missing"></p><figcaption style="text-align:center;">[ Example: when using the RB system as a TCP server ]</figcaption><h3 id="_3-method-2-robot-control-via-external-script-command" tabindex="-1">3. [Method 2] Robot Control via External Script Command <a class="header-anchor" href="#_3-method-2-robot-control-via-external-script-command" aria-label="Permalink to &quot;3. [Method 2] Robot Control via External Script Command&quot;">​</a></h3><p><img src="'+p+'" alt="missing"></p><ul><li>RB system operates as a TCP/IP server. (Port 5000 &amp; 5001)</li><li>Rather than using RB&#39;s UI program, it is a way for users to create their own operating programs in their preferred development language.</li><li>According to the dedicated script syntax stipulated by RB, users just need to send a string.</li><li>User’s development language is irrelevant. (JAVA, C#, C/C++, Python, etc.)</li><li>Regardless of the user&#39;s development language, just send a script string that matches the grammar. (to specific ports)</li><li>Port 5000 is used to send user commands to the RB system. (movement command, etc.)</li><li>Port 5001 is used to deliver the status information of the RB system to the user. (joint information, movement state information, etc.)</li></ul><p><img src="'+m+'" alt="missing"></p><br><p>The external control script is described in <u>“Manual Appendix E”</u>. There are two types of robot motion command script.</p><ul><li>Descriptive script (described in the ‘Product manual-Appen.E’)</li><li>Function-type script (described in the ‘UI script manual’)</li></ul><p>It doesn&#39;t matter which type user use. Just send a command to port 5000.</p><h4 id="_3-1-example-1-move-j" tabindex="-1">3.1 Example 1 - Move J <a class="header-anchor" href="#_3-1-example-1-move-j" aria-label="Permalink to &quot;3.1 Example 1 - Move J&quot;">​</a></h4><p>The example below is an example of both descriptive and functional type for moving 6 joints to 0,45,90,0,90,0 degrees with Move J.</p><h5 id="_3-1-1-descriptive-script-type" tabindex="-1">3.1.1 Descriptive script Type: <a class="header-anchor" href="#_3-1-1-descriptive-script-type" aria-label="Permalink to &quot;3.1.1 Descriptive script Type:&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>“jointall 0.3, 0.1, 0, 45, 90, 0, 90, 0”</span></span></code></pre></div><h5 id="_3-1-2-functional-type-script-type" tabindex="-1">3.1.2 Functional-type script Type: <a class="header-anchor" href="#_3-1-2-functional-type-script-type" aria-label="Permalink to &quot;3.1.2 Functional-type script Type:&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>“move_j(jnt[0, 45, 90, 0, 90, 0], 60, 80)”</span></span></code></pre></div><h4 id="_3-2-example-2-move-l" tabindex="-1">3.2 Example 2 - Move L <a class="header-anchor" href="#_3-2-example-2-move-l" aria-label="Permalink to &quot;3.2 Example 2 - Move L&quot;">​</a></h4><p>The example below is an example of both descriptive and functional type for moving TCP to 100,200,300,0,90,0 with Move L.</p><h5 id="_3-2-1-descriptive-script-type" tabindex="-1">3.2.1 Descriptive script Type: <a class="header-anchor" href="#_3-2-1-descriptive-script-type" aria-label="Permalink to &quot;3.2.1 Descriptive script Type:&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>“movetcp 0.2, 0.1, 100, 200, 300, 0, 90, 0”</span></span></code></pre></div><h5 id="_3-2-2-functional-type-script-type" tabindex="-1">3.2.2 Functional-type script Type: <a class="header-anchor" href="#_3-2-2-functional-type-script-type" aria-label="Permalink to &quot;3.2.2 Functional-type script Type:&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>“move_l(pnt[100, 200, 300, 0, 90, 0], 100, 300)”</span></span></code></pre></div><h3 id="_4-etc" tabindex="-1">4. ETC <a class="header-anchor" href="#_4-etc" aria-label="Permalink to &quot;4. ETC&quot;">​</a></h3><p>Rainbow Robotics provides an example program for &#39;External Control Script&#39;.</p><ul><li>The description of the example program is described in Appendix E of the product manual.</li><li>Example programs are available in two languages. (C++ &amp; C#)</li><li>The example program consists of C++ and C#, but as described above, the user-developed language is irrelevant.</li></ul><h4 id="_4-1-example-program-1" tabindex="-1">4.1 Example Program 1 <a class="header-anchor" href="#_4-1-example-program-1" aria-label="Permalink to &quot;4.1 Example Program 1&quot;">​</a></h4><ol><li>C++ Language<br></li><li>Qt (IDE Program) 5.8 environment. <ul><li>Get v5.8 from <a href="https://www.qt.io/" target="_blank" rel="noreferrer">https://www.qt.io/</a></li></ul></li></ol><h4 id="_4-2-example-program-2" tabindex="-1">4.2 Example Program 2 <a class="header-anchor" href="#_4-2-example-program-2" aria-label="Permalink to &quot;4.2 Example Program 2&quot;">​</a></h4><ol><li>C# Language</li><li>Microsoft Visual Studio (VS) environment</li></ol>',47),u=[h];function g(b,v,f,_,y,x){return t(),a("div",null,u)}const k=e(d,[["render",g]]);export{C as __pageData,k as default};
